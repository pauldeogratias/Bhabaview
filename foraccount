================================================================================
CODE FILES COMPILATION
Generated on: C:\src\Bhaba_com\bhaba-marketplace
Total files: 45
Comments removed: Yes
================================================================================

FILE STRUCTURE:
----------------------------------------
  1. C:\src\Bhaba_com\bhaba-marketplace\src\components\AppDownloadBanner.tsx
  2. C:\src\Bhaba_com\bhaba-marketplace\src\components\BottomNavigation.tsx
  3. C:\src\Bhaba_com\bhaba-marketplace\src\components\DynamicAspectRatioImage.tsx
  4. C:\src\Bhaba_com\bhaba-marketplace\src\components\ErrorBoundary.tsx
  5. C:\src\Bhaba_com\bhaba-marketplace\src\components\FilterModal.tsx
  6. C:\src\Bhaba_com\bhaba-marketplace\src\components\Footer.tsx
  7. C:\src\Bhaba_com\bhaba-marketplace\src\components\HeaderBar.tsx
  8. C:\src\Bhaba_com\bhaba-marketplace\src\components\LazyImage.tsx
  9. C:\src\Bhaba_com\bhaba-marketplace\src\components\LoadingOverlay.tsx
 10. C:\src\Bhaba_com\bhaba-marketplace\src\components\OptimizedImage.tsx
 11. C:\src\Bhaba_com\bhaba-marketplace\src\components\OptimizedProductCard.tsx
 12. C:\src\Bhaba_com\bhaba-marketplace\src\components\ProductCard.tsx
 13. C:\src\Bhaba_com\bhaba-marketplace\src\components\ProductGrid.tsx
 14. C:\src\Bhaba_com\bhaba-marketplace\src\components\SEOHead.tsx
 15. C:\src\Bhaba_com\bhaba-marketplace\src\hooks\useAnalytics.ts
 16. C:\src\Bhaba_com\bhaba-marketplace\src\hooks\useDebounce.ts
 17. C:\src\Bhaba_com\bhaba-marketplace\src\hooks\usePerformance.ts
 18. C:\src\Bhaba_com\bhaba-marketplace\src\hooks\usePerformanceMonitor.ts
 19. C:\src\Bhaba_com\bhaba-marketplace\src\hooks\useProducts.ts
 20. C:\src\Bhaba_com\bhaba-marketplace\src\pages\_app.tsx
 21. C:\src\Bhaba_com\bhaba-marketplace\src\pages\account.tsx
 22. C:\src\Bhaba_com\bhaba-marketplace\src\pages\category\[category].tsx
 23. C:\src\Bhaba_com\bhaba-marketplace\src\pages\index.tsx
 24. C:\src\Bhaba_com\bhaba-marketplace\src\pages\privacy-policy-full.tsx
 25. C:\src\Bhaba_com\bhaba-marketplace\src\pages\privacy-policy.tsx
 26. C:\src\Bhaba_com\bhaba-marketplace\src\pages\product\[category]\[slug].tsx
 27. C:\src\Bhaba_com\bhaba-marketplace\src\pages\terms-of-service-full.tsx
 28. C:\src\Bhaba_com\bhaba-marketplace\src\pages\terms-of-service.tsx
 29. C:\src\Bhaba_com\bhaba-marketplace\src\pages\test.tsx
 30. C:\src\Bhaba_com\bhaba-marketplace\src\styles\globals copy.css
 31. C:\src\Bhaba_com\bhaba-marketplace\src\styles\globals.css
 32. C:\src\Bhaba_com\bhaba-marketplace\src\types\api.ts
 33. C:\src\Bhaba_com\bhaba-marketplace\src\types\global.d.ts
 34. C:\src\Bhaba_com\bhaba-marketplace\src\types\index.ts
 35. C:\src\Bhaba_com\bhaba-marketplace\src\utils\api.ts
 36. C:\src\Bhaba_com\bhaba-marketplace\src\utils\formatCurrency.ts
 37. C:\src\Bhaba_com\bhaba-marketplace\src\utils\sanitizeData.ts
 38. C:\src\Bhaba_com\bhaba-marketplace\src\utils\shuffle.ts
 39. C:\src\Bhaba_com\bhaba-marketplace\src\utils\webVitals.ts
 40. C:\src\Bhaba_com\bhaba-marketplace\.env
 41. C:\src\Bhaba_com\bhaba-marketplace\.env.local
 42. C:\src\Bhaba_com\bhaba-marketplace\package.json
 43. C:\src\Bhaba_com\bhaba-marketplace\public\manifest.json
 44. C:\src\Bhaba_com\bhaba-marketplace\public\sw.js
 45. C:\src\Bhaba_com\bhaba-marketplace\public\robots.txt

================================================================================

FILE 1: C:\src\Bhaba_com\bhaba-marketplace\src\components\AppDownloadBanner.tsx
================================================================================
import React, { useState, useEffect } from 'react'
import { X, Download, Smartphone, Star } from 'lucide-react'

interface AppDownloadBannerProps {
  position?: 'top' | 'bottom' | 'floating'
  className?: string
}

const AppDownloadBanner: React.FC<AppDownloadBannerProps> = ({
  position = 'floating',
  className = ''
}) => {
  const [isVisible, setIsVisible] = useState(false)
  const [isDismissed, setIsDismissed] = useState(false)

  useEffect(() => {
    const dismissed = localStorage.getItem('bhaba-app-banner-dismissed')
    if (dismissed) {
      setIsDismissed(true)
      return
    }

    const timer = setTimeout(() => {
      setIsVisible(true)
    }, 2000)

    return () => clearTimeout(timer)
  }, [])

  const handleDismiss = () => {
    setIsVisible(false)
    setIsDismissed(true)
    localStorage.setItem('bhaba-app-banner-dismissed', 'true')
  }

  const handleDownload = () => {
    window.open('https://play.google.com/store/apps/details?id=com.vendor.bhaba', '_blank')
  }

  if (isDismissed || !isVisible) return null

  const bannerClasses = {
    top: 'fixed top-16 left-0 right-0 z-30',
    bottom: 'fixed bottom-16 left-0 right-0 z-30',
    floating: 'fixed bottom-20 left-4 right-4 z-30 md:left-auto md:right-4 md:w-80'
  }

  return (
    <div className={`${bannerClasses[position]} ${className}`}>
      <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white rounded-lg shadow-2xl mx-auto max-w-sm md:max-w-md animate-in slide-in-from-bottom duration-300">
        {}
        {position === 'floating' && (
          <div className="relative overflow-hidden">
            {}
            <div className="absolute inset-0 opacity-10">
              <div className="absolute inset-0 bg-repeat opacity-20" style={{
                backgroundImage: `url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Ccircle cx='3' cy='3' r='3'/%3E%3C/g%3E%3C/svg%3E")`
              }} />
            </div>

            <div className="relative p-4">
              <button
                onClick={handleDismiss}
                className="absolute top-2 right-2 p-1 hover:bg-white/20 rounded-full transition-colors"
              >
                <X className="h-4 w-4" />
              </button>

              <div className="flex items-center space-x-3">
                <div className="relative">
                  <div className="w-12 h-12 bg-white/20 rounded-xl flex items-center justify-center backdrop-blur-sm">
                    <Smartphone className="h-6 w-6 text-white" />
                  </div>
                  <div className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center">
                    <span className="text-xs font-bold text-white">!</span>
                  </div>
                </div>

                <div className="flex-1 min-w-0">
                  <h3 className="font-bold text-sm truncate">
                    Download Bhaba App
                  </h3>
                  <p className="text-xs text-white/80 line-clamp-2">
                    Get the best shopping experience on mobile
                  </p>
                  <div className="flex items-center mt-1">
                    <div className="flex items-center">
                      {[...Array(5)].map((_, i) => (
                        <Star key={i} className="h-3 w-3 fill-yellow-400 text-yellow-400" />
                      ))}
                    </div>
                    <span className="text-xs text-white/80 ml-1">4.8 (2.1k)</span>
                  </div>
                </div>
              </div>

              <button
                onClick={handleDownload}
                className="w-full mt-3 bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white py-2 px-4 rounded-lg transition-all duration-200 flex items-center justify-center space-x-2 font-medium text-sm"
              >
                <Download className="h-4 w-4" />
                <span>Download Free</span>
              </button>
            </div>
          </div>
        )}

        {}
        {(position === 'top' || position === 'bottom') && (
          <div className="relative overflow-hidden">
            <div className="flex items-center justify-between p-3 md:p-4">
              <div className="flex items-center space-x-3 flex-1 min-w-0">
                <div className="hidden sm:block">
                  <div className="w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center">
                    <Smartphone className="h-5 w-5" />
                  </div>
                </div>

                <div className="flex-1 min-w-0">
                  <h3 className="font-semibold text-sm md:text-base">
                    Get the Bhaba App
                  </h3>
                  <p className="text-xs text-white/80 truncate">
                    Better shopping experience on your phone
                  </p>
                </div>
              </div>

              <div className="flex items-center space-x-2">
                <button
                  onClick={handleDownload}
                  className="bg-white/20 hover:bg-white/30 text-white px-3 py-1.5 md:px-4 md:py-2 rounded-md text-xs md:text-sm font-medium transition-colors flex items-center space-x-1"
                >
                  <Download className="h-3 w-3 md:h-4 md:w-4" />
                  <span className="hidden sm:inline">Download</span>
                </button>

                <button
                  onClick={handleDismiss}
                  className="p-1 hover:bg-white/20 rounded-full transition-colors"
                >
                  <X className="h-4 w-4" />
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default AppDownloadBanner

================================================================================

FILE 2: C:\src\Bhaba_com\bhaba-marketplace\src\components\BottomNavigation.tsx
================================================================================
import React, { useState, useCallback } from 'react'
import Link from 'next/link'
import { Home, ShoppingBag, User, Box, Download, Star } from 'lucide-react'

interface BottomNavigationProps {
  onWholesaleClick: () => void
}

const BottomNavigation: React.FC<BottomNavigationProps> = ({ onWholesaleClick }) => {
  const [showAppPrompt, setShowAppPrompt] = useState(false)

  const handleAppDownload = useCallback(() => {
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'app_download_click', {
        event_category: 'engagement',
        event_label: 'bottom_navigation'
      })
    }

    window.open('https://play.google.com/store/apps/details?id=com.vendor.bhaba', '_blank')
  }, [])

  const navigationItems = [
    {
      href: '/',
      icon: Home,
      label: 'Home',
      action: null
    },
    {
      href: null,
      icon: Box,
      label: 'Wholesale',
      action: onWholesaleClick
    },
    {
      href: null,
      icon: Download,
      label: 'Get App',
      action: handleAppDownload,
      highlight: true
    },
    {
      href: null,
      icon: ShoppingBag,
      label: 'Cart',
      action: () => setShowAppPrompt(true)
    },
    {
      href: '/account',
      icon: User,
      label: 'Account',
      action: null
    }
  ]

  return (
    <>
      <nav className="fixed bottom-0 left-0 right-0 bg-gradient-to-r from-blue-500 to-purple-600 border-t border-white/20 shadow-lg z-50 safe-area-inset-bottom">
        <div className="flex justify-around items-center py-2 px-1">
          {navigationItems.map((item, index) => {
            const IconComponent = item.icon

            if (item.href) {
              return (
                <Link
                  key={index}
                  href={item.href}
                  className={`flex flex-col items-center p-2 text-white hover:text-gray-200 transition-all duration-200 hover:scale-105 ${
                    item.highlight ? 'bg-white/20 rounded-lg backdrop-blur-sm' : ''
                  }`}
                >
                  <IconComponent className="h-6 w-6" />
                  <span className="text-xs mt-1">{item.label}</span>
                  {item.highlight && (
                    <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate-pulse" />
                  )}
                </Link>
              )
            }

            return (
              <button
                key={index}
                onClick={item.action || undefined}
                className={`flex flex-col items-center p-2 text-white hover:text-gray-200 transition-all duration-200 hover:scale-105 relative ${
                  item.highlight ? 'bg-white/20 rounded-lg backdrop-blur-sm' : ''
                }`}
              >
                <IconComponent className="h-6 w-6" />
                <span className="text-xs mt-1">{item.label}</span>
                {item.highlight && (
                  <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate-pulse" />
                )}
              </button>
            )
          })}
        </div>

        {}
        <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
          <div className="bg-green-500 text-white text-xs px-2 py-1 rounded-full flex items-center space-x-1 animate-bounce">
            <Star className="h-3 w-3" />
            <span>New App!</span>
          </div>
        </div>
      </nav>

      {}
      {showAppPrompt && (
        <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-xl p-6 max-w-sm w-full">
            <div className="text-center">
              <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Download className="h-8 w-8 text-blue-600" />
              </div>
              <h3 className="text-lg font-semibold mb-2">Download Our App</h3>
              <p className="text-gray-600 mb-6">
                Get the full Bhaba experience with our mobile app. Shop easier, faster, and get exclusive deals!
              </p>
              <div className="space-y-3">
                <button
                  onClick={handleAppDownload}
                  className="w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors"
                >
                  Download Now
                </button>
                <button
                  onClick={() => setShowAppPrompt(false)}
                  className="w-full text-gray-500 py-2"
                >
                  Maybe Later
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  )
}

export default BottomNavigation

================================================================================

FILE 3: C:\src\Bhaba_com\bhaba-marketplace\src\components\DynamicAspectRatioImage.tsx
================================================================================
import React, { useEffect, useState } from 'react'
import Image from 'next/image'

type ImageUrl = string | string[]

interface AspectRatioImageProps {
  imageUrl: ImageUrl
  className?: string
  containerClassName?: string
}

interface AspectRatioData {
  url: string
  aspectRatio: number
  error: boolean
}

const DynamicAspectRatioImage: React.FC<AspectRatioImageProps> = ({
  imageUrl,
  className = 'object-cover rounded',
  containerClassName = ''
}) => {
  const [images, setImages] = useState<AspectRatioData[]>([])
  const [loading, setLoading] = useState(true)
  const [defaultAspectRatio] = useState(1)

  useEffect(() => {
    const urls = typeof imageUrl === 'string' ? [imageUrl] : imageUrl

    const loadImage = (url: string): Promise<AspectRatioData> => {
      return new Promise((resolve) => {
        const img = new window.Image()
        img.src = url

        img.onload = () => {
          const aspectRatio = img.naturalWidth / img.naturalHeight
          resolve({ url, aspectRatio, error: false })
        }

        img.onerror = () => {
          resolve({ url, aspectRatio: defaultAspectRatio, error: true })
        }
      })
    }

    const timer = setTimeout(() => {
      Promise.all(urls.map(loadImage)).then((results) => {
        setImages(results)
        setLoading(false)
      })
    }, 0)

    return () => clearTimeout(timer)
  }, [imageUrl, defaultAspectRatio])

  if (loading) {
    return (
      <div
        className={`relative bg-gray-100 animate-pulse ${containerClassName}`}
        style={{ aspectRatio: defaultAspectRatio }}
      >
        <div className="absolute inset-0 flex justify-center items-center">
          <div className="w-6 h-6 border-2 border-orange-500 border-t-transparent rounded-full animate-spin" />
        </div>
      </div>
    )
  }

  return (
    <>
      {images.map((img, index) => (
        <div
          key={index}
          className={`relative ${containerClassName}`}
          style={{ aspectRatio: img.aspectRatio }}
        >
          {img.error ? (
            <div className="bg-gray-100 w-full h-full flex items-center justify-center text-gray-500 text-sm">
              Image failed to load
            </div>
          ) : (
            <Image
              src={img.url}
              alt={`dynamic-img-${index}`}
              fill
              className={className}
              sizes="(max-width: 640px) 50vw, (max-width: 768px) 33vw, (max-width: 1024px) 25vw, 20vw"
              loading="lazy"
              onError={(e) => {
                const target = e.target as HTMLImageElement
                target.onerror = null
                target.src = '/placeholder-image.jpg'
              }}
            />
          )}
        </div>
      ))}
    </>
  )
}

export default React.memo(DynamicAspectRatioImage)

================================================================================

FILE 4: C:\src\Bhaba_com\bhaba-marketplace\src\components\ErrorBoundary.tsx
================================================================================
import React, { Component, ReactNode } from 'react'
import { AlertCircle, RefreshCw, Home } from 'lucide-react'

interface Props {
  children: ReactNode
  fallback?: ReactNode
  onError?: (error: Error, errorInfo: React.ErrorInfo) => void
}

interface State {
  hasError: boolean
  error?: Error
}

class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error }
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo)

    this.props.onError?.(error, errorInfo)

    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'exception', {
        description: error.message,
        fatal: false,
        custom_map: {
          component_stack: errorInfo.componentStack
        }
      })
    }
  }

  handleRetry = () => {
    this.setState({ hasError: false, error: undefined })
  }

  handleGoHome = () => {
    window.location.href = '/'
  }

  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback
      }

      return (
        <div className="min-h-[400px] flex items-center justify-center p-4">
          <div className="max-w-md w-full text-center">
            <div className="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-red-100 mb-4">
              <AlertCircle className="h-8 w-8 text-red-600" />
            </div>

            <h2 className="text-xl font-semibold text-gray-900 mb-2">
              Something went wrong
            </h2>

            <p className="text-gray-600 mb-6">
              We&apos;re sorry, but something unexpected happened. Please try refreshing the page or go back to the homepage.
            </p>

            {process.env.NODE_ENV === 'development' && this.state.error && (
              <details className="mb-6 text-left">
                <summary className="cursor-pointer text-sm font-medium text-gray-700 mb-2">
                  Error Details (Development Only)
                </summary>
                <pre className="text-xs bg-gray-100 p-3 rounded-md overflow-auto max-h-32 text-red-600">
                  {this.state.error.message}
                  {this.state.error.stack}
                </pre>
              </details>
            )}

            <div className="flex flex-col sm:flex-row gap-3 justify-center">
              <button
                onClick={this.handleRetry}
                className="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                Try Again
              </button>

              <button
                onClick={this.handleGoHome}
                className="inline-flex items-center justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
              >
                <Home className="h-4 w-4 mr-2" />
                Go Home
              </button>
            </div>
          </div>
        </div>
      )
    }

    return this.props.children
  }
}

export const ErrorBoundaryWrapper: React.FC<{
  children: ReactNode
  fallback?: ReactNode
}> = ({ children, fallback }) => {
  return (
    <ErrorBoundary fallback={fallback}>
      {children}
    </ErrorBoundary>
  )
}

export default ErrorBoundary

================================================================================

FILE 5: C:\src\Bhaba_com\bhaba-marketplace\src\components\FilterModal.tsx
================================================================================
import React, { useState, useEffect, useCallback, useMemo } from 'react'
import { X, Search, Check, Sliders, RefreshCw } from 'lucide-react'

interface Vendor {
  id: string
  store_name: string
  store_logo: string
}

interface Category {
  id: string
  category_name: string
}

interface Filters {
  categories: string[]
  vendors: string[]
  priceRange: [number, number]
  inStock: boolean
}

interface FilterModalProps {
  isOpen: boolean
  onClose: () => void
  categories: Category[]
  vendors: Vendor[]
  filters: Filters
  onFiltersChange: (filters: Filters) => void
}

const FilterModal: React.FC<FilterModalProps> = ({
  isOpen,
  onClose,
  categories,
  vendors,
  filters,
  onFiltersChange
}) => {
  const [localFilters, setLocalFilters] = useState<Filters>(filters)
  const [categorySearch, setCategorySearch] = useState('')
  const [vendorSearch, setVendorSearch] = useState('')
  const [activeTab, setActiveTab] = useState<'categories' | 'vendors' | 'price' | 'availability'>('categories')
  const [hasChanges, setHasChanges] = useState(false)

  useEffect(() => {
    if (isOpen) {
      setLocalFilters(filters)
      setHasChanges(false)
      setCategorySearch('')
      setVendorSearch('')
    }
  }, [isOpen, filters])

  useEffect(() => {
    const filtersChanged = JSON.stringify(localFilters) !== JSON.stringify(filters)
    setHasChanges(filtersChanged)
  }, [localFilters, filters])

  const filteredCategories = useMemo(() => {
    if (!categorySearch) return categories
    return categories.filter(category => {
      if (!category?.category_name) return false
      return category.category_name.toLowerCase().includes(categorySearch.toLowerCase())
    })
  }, [categories, categorySearch])

  const filteredVendors = useMemo(() => {
    if (!vendorSearch) return vendors
    return vendors.filter(vendor => {
      if (!vendor?.store_name) return false
      return vendor.store_name.toLowerCase().includes(vendorSearch.toLowerCase())
    })
  }, [vendors, vendorSearch])

  const handleCategoryChange = useCallback((categoryId: string) => {
    setLocalFilters(prev => ({
      ...prev,
      categories: prev.categories.includes(categoryId)
        ? prev.categories.filter(id => id !== categoryId)
        : [...prev.categories, categoryId]
    }))
  }, [])

  const handleVendorChange = useCallback((vendorId: string) => {
    setLocalFilters(prev => ({
      ...prev,
      vendors: prev.vendors.includes(vendorId)
        ? prev.vendors.filter(id => id !== vendorId)
        : [...prev.vendors, vendorId]
    }))
  }, [])

  const handlePriceChange = useCallback((type: 'min' | 'max', value: number) => {
    setLocalFilters(prev => ({
      ...prev,
      priceRange: type === 'min'
        ? [value, prev.priceRange[1]]
        : [prev.priceRange[0], value]
    }))
  }, [])

  const clearFilters = useCallback(() => {
    const clearedFilters = {
      categories: [],
      vendors: [],
      priceRange: [0, 10000000] as [number, number],
      inStock: false
    }
    setLocalFilters(clearedFilters)
  }, [])

  const applyFilters = useCallback(() => {
    onFiltersChange(localFilters)
    onClose()
  }, [localFilters, onFiltersChange, onClose])

  const resetToOriginal = useCallback(() => {
    setLocalFilters(filters)
    setHasChanges(false)
  }, [filters])

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (!isOpen) return

      if (event.key === 'Escape') {
        onClose()
      }
      if (event.key === 'Enter' && hasChanges) {
        applyFilters()
      }
    }

    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [isOpen, onClose, hasChanges, applyFilters])

  if (!isOpen) return null

  const tabs: Array<{
    id: 'categories' | 'vendors' | 'price' | 'availability'
    label: string
    count: number
  }> = [
    { id: 'categories', label: 'Categories', count: localFilters.categories.length },
    { id: 'vendors', label: 'Vendors', count: localFilters.vendors.length },
    { id: 'price', label: 'Price', count: localFilters.priceRange[0] > 0 || localFilters.priceRange[1] < 10000000 ? 1 : 0 },
    { id: 'availability', label: 'Stock', count: localFilters.inStock ? 1 : 0 },
  ]

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-2 sm:p-4">
      <div className="bg-white rounded-2xl w-full max-w-2xl max-h-[90vh] overflow-hidden shadow-2xl">
        {}
        <div className="sticky top-0 bg-white border-b px-4 sm:px-6 py-4 flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Sliders className="h-6 w-6 text-blue-600" />
            <h2 className="text-xl font-bold text-gray-900">Filters</h2>
            {hasChanges && (
              <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
                Changes pending
              </span>
            )}
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full transition-colors"
            aria-label="Close filters"
          >
            <X className="h-5 w-5" />
          </button>
        </div>

        {}
        <div className="border-b">
          <div className="flex overflow-x-auto">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium whitespace-nowrap transition-colors ${
                  activeTab === tab.id
                    ? 'text-blue-600 border-b-2 border-blue-600 bg-blue-50'
                    : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'
                }`}
              >
                <span>{tab.label}</span>
                {tab.count > 0 && (
                  <span className="bg-blue-100 text-blue-800 text-xs px-2 py-0.5 rounded-full">
                    {tab.count}
                  </span>
                )}
              </button>
            ))}
          </div>
        </div>

        {}
        <div className="p-4 sm:p-6 max-h-96 overflow-y-auto">
          {}
          {activeTab === 'categories' && (
            <div className="space-y-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search categories..."
                  value={categorySearch}
                  onChange={(e) => setCategorySearch(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div className="space-y-2 max-h-64 overflow-y-auto">
                {filteredCategories.map((category) => (
                  <label
                    key={category.id}
                    className="flex items-center space-x-3 p-3 hover:bg-gray-50 rounded-lg cursor-pointer transition-colors"
                  >
                    <div className="relative">
                      <input
                        type="checkbox"
                        checked={localFilters.categories.includes(category.id)}
                        onChange={() => handleCategoryChange(category.id)}
                        className="sr-only"
                      />
                      <div className={`w-5 h-5 rounded border-2 flex items-center justify-center transition-colors ${
                        localFilters.categories.includes(category.id)
                          ? 'bg-blue-600 border-blue-600'
                          : 'border-gray-300 hover:border-blue-400'
                      }`}>
                        {localFilters.categories.includes(category.id) && (
                          <Check className="h-3 w-3 text-white" />
                        )}
                      </div>
                    </div>
                    <span className="text-gray-700 flex-1">
                      {category?.category_name || 'Unnamed Category'}
                    </span>
                  </label>
                ))}

                {filteredCategories.length === 0 && (
                  <div className="text-center py-8 text-gray-500">
                    <Search className="h-8 w-8 mx-auto mb-2 opacity-50" />
                    <p>No categories found matching &quot;{categorySearch}&quot;</p>
                  </div>
                )}
              </div>
            </div>
          )}

          {}
          {activeTab === 'vendors' && (
            <div className="space-y-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search vendors..."
                  value={vendorSearch}
                  onChange={(e) => setVendorSearch(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div className="space-y-2 max-h-64 overflow-y-auto">
                {filteredVendors.map((vendor) => (
                  <label
                    key={vendor.id}
                    className="flex items-center space-x-3 p-3 hover:bg-gray-50 rounded-lg cursor-pointer transition-colors"
                  >
                    <div className="relative">
                      <input
                        type="checkbox"
                        checked={localFilters.vendors.includes(vendor.id)}
                        onChange={() => handleVendorChange(vendor.id)}
                        className="sr-only"
                      />
                      <div className={`w-5 h-5 rounded border-2 flex items-center justify-center transition-colors ${
                        localFilters.vendors.includes(vendor.id)
                          ? 'bg-blue-600 border-blue-600'
                          : 'border-gray-300 hover:border-blue-400'
                      }`}>
                        {localFilters.vendors.includes(vendor.id) && (
                          <Check className="h-3 w-3 text-white" />
                        )}
                      </div>
                    </div>
                    <span className="text-gray-700 flex-1">
                      {vendor?.store_name || 'Unnamed Vendor'}
                    </span>
                  </label>
                ))}

                {filteredVendors.length === 0 && (
                  <div className="text-center py-8 text-gray-500">
                    <Search className="h-8 w-8 mx-auto mb-2 opacity-50" />
                    <p>No vendors found matching &quot;{vendorSearch}&quot;</p>
                  </div>
                )}
              </div>
            </div>
          )}

          {}
          {activeTab === 'price' && (
            <div className="space-y-6">
              <div>
                <h3 className="font-semibold text-gray-900 mb-4">Price Range (TZS)</h3>
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Minimum
                      </label>
                      <input
                        type="number"
                        placeholder="0"
                        value={localFilters.priceRange[0] || ''}
                        onChange={(e) => handlePriceChange('min', parseInt(e.target.value) || 0)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Maximum
                      </label>
                      <input
                        type="number"
                        placeholder="10,000,000"
                        value={localFilters.priceRange[1] === 10000000 ? '' : localFilters.priceRange[1]}
                        onChange={(e) => handlePriceChange('max', parseInt(e.target.value) || 10000000)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>
                  </div>

                  {}
                  <div className="px-2">
                    <div className="relative">
                      <input
                        type="range"
                        min="0"
                        max="1000000"
                        step="10000"
                        value={Math.min(localFilters.priceRange[0], 1000000)}
                        onChange={(e) => handlePriceChange('min', parseInt(e.target.value))}
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider-thumb"
                      />
                      <input
                        type="range"
                        min="0"
                        max="1000000"
                        step="10000"
                        value={Math.min(localFilters.priceRange[1], 1000000)}
                        onChange={(e) => handlePriceChange('max', parseInt(e.target.value))}
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider-thumb mt-2"
                      />
                    </div>

                    <div className="flex justify-between text-xs text-gray-500 mt-2">
                      <span>TZS 0</span>
                      <span>TZS 1M+</span>
                    </div>
                  </div>

                  {}
                  <div className="flex flex-wrap gap-2">
                    {[
                      { label: 'Under 50K', range: [0, 50000] },
                      { label: '50K - 200K', range: [50000, 200000] },
                      { label: '200K - 500K', range: [200000, 500000] },
                      { label: '500K+', range: [500000, 10000000] },
                    ].map((preset) => (
                      <button
                        key={preset.label}
                        onClick={() => setLocalFilters(prev => ({ ...prev, priceRange: preset.range as [number, number] }))}
                        className={`px-3 py-1.5 text-xs rounded-full transition-colors ${
                          localFilters.priceRange[0] === preset.range[0] &&
                          localFilters.priceRange[1] === preset.range[1]
                            ? 'bg-blue-100 text-blue-800 border border-blue-300'
                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                        }`}
                      >
                        {preset.label}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          {}
          {activeTab === 'availability' && (
            <div className="space-y-4">
              <h3 className="font-semibold text-gray-900">Product Availability</h3>

              <label className="flex items-center space-x-3 p-3 hover:bg-gray-50 rounded-lg cursor-pointer transition-colors">
                <div className="relative">
                  <input
                    type="checkbox"
                    checked={localFilters.inStock}
                    onChange={(e) => setLocalFilters(prev => ({ ...prev, inStock: e.target.checked }))}
                    className="sr-only"
                  />
                  <div className={`w-5 h-5 rounded border-2 flex items-center justify-center transition-colors ${
                    localFilters.inStock
                      ? 'bg-green-600 border-green-600'
                      : 'border-gray-300 hover:border-green-400'
                  }`}>
                    {localFilters.inStock && (
                      <Check className="h-3 w-3 text-white" />
                    )}
                  </div>
                </div>
                <div>
                  <span className="text-gray-900 font-medium">In Stock Only</span>
                  <p className="text-sm text-gray-500">Show only products that are currently available</p>
                </div>
              </label>
            </div>
          )}
        </div>

        {}
        <div className="sticky bottom-0 bg-white border-t px-4 sm:px-6 py-4">
          <div className="flex gap-3">
            <button
              onClick={clearFilters}
              className="flex items-center justify-center gap-2 flex-1 bg-gray-100 text-gray-800 py-3 px-4 rounded-lg hover:bg-gray-200 transition-colors text-sm font-medium"
            >
              <RefreshCw className="h-4 w-4" />
              Clear All
            </button>

            {hasChanges && (
              <button
                onClick={resetToOriginal}
                className="flex-1 bg-orange-100 text-orange-800 py-3 px-4 rounded-lg hover:bg-orange-200 transition-colors text-sm font-medium"
              >
                Reset
              </button>
            )}

            <button
              onClick={applyFilters}
              className={`flex-1 py-3 px-4 rounded-lg transition-colors text-sm font-medium ${
                hasChanges
                  ? 'bg-blue-600 text-white hover:bg-blue-700'
                  : 'bg-blue-100 text-blue-800 cursor-default'
              }`}
              disabled={!hasChanges}
            >
              Apply Filters
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default FilterModal

================================================================================

FILE 6: C:\src\Bhaba_com\bhaba-marketplace\src\components\Footer.tsx
================================================================================
import React from 'react'
import Link from 'next/link'

const Footer: React.FC = () => {
  return (
    <footer className="bg-gray-800 text-white py-8 mt-16">
      <div className="max-w-7xl mx-auto px-4">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div>
            <h3 className="text-lg font-semibold mb-4">Bhaba Marketplace</h3>
            <p className="text-gray-300 text-sm">
              Your trusted online marketplace for quality products in Tanzania.
            </p>
          </div>

          <div>
            <h3 className="text-lg font-semibold mb-4">Quick Links</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <Link href="/" className="text-gray-300 hover:text-white transition-colors">
                  Home
                </Link>
              </li>
              <li>
                <Link href="/privacy-policy" className="text-gray-300 hover:text-white transition-colors">
                  Privacy Policy
                </Link>
              </li>
              <li>
                <Link href="/terms-of-service" className="text-gray-300 hover:text-white transition-colors">
                  Terms of Service
                </Link>
              </li>
{}
            </ul>
          </div>

          <div>
            <h3 className="text-lg font-semibold mb-4">Contact Info</h3>
            <div className="text-sm text-gray-300 space-y-2">
              <p>Email: info@bhabalimited.com</p>
              <p>Phone: +255 618 205 278</p>
              <p>Dar es Salaam, Tanzania</p>
            </div>
          </div>
        </div>

        <div className="border-t border-gray-700 mt-8 pt-6 text-center">
          <p className="text-sm text-gray-400">
            © {new Date().getFullYear()} Bhaba Limited. All rights reserved.
          </p>
        </div>
      </div>
    </footer>
  )
}

export default Footer

================================================================================

FILE 7: C:\src\Bhaba_com\bhaba-marketplace\src\components\HeaderBar.tsx
================================================================================
import React, { useState, useEffect, useRef, useCallback, memo } from 'react';
import { Search, Filter, Grid, List, ChevronLeft, ArrowUpDown, Menu, X, Sparkles, Bell } from 'lucide-react';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { useDebounce } from '../hooks/useDebounce';

interface HeaderBarProps {
  searchQuery?: string;
  setSearchQuery?: (query: string) => void;
  viewMode?: 'grid' | 'list';
  setViewMode?: (mode: 'grid' | 'list') => void;
  setShowFilters?: (show: boolean) => void;
  sortOption?: string;
  setSortOption?: (option: string) => void;
  showBackButton?: boolean;
  onBack?: () => void;
  showSearch?: boolean;
  showViewToggle?: boolean;
  showSort?: boolean;
  showFilter?: boolean;
}

const HeaderBar = memo<HeaderBarProps>(({
  searchQuery = '',
  setSearchQuery = () => {},
  viewMode = 'grid',
  setViewMode = () => {},
  setShowFilters = () => {},
  sortOption = 'relevance',
  setSortOption = () => {},
  showBackButton = false,
  onBack = () => {},
  showSearch = true,
  showViewToggle = true,
  showSort = true,
  showFilter = true,
}) => {
  const [showSortPopup, setShowSortPopup] = useState(false);
  const [showMobileMenu, setShowMobileMenu] = useState(false);
  const [isSearchFocused, setIsSearchFocused] = useState(false);
  const [, setScrollY] = useState(0);
  const [isScrolled, setIsScrolled] = useState(false);
  const debouncedSearchQuery = useDebounce(searchQuery, 300);
  const sortPopupRef = useRef<HTMLDivElement>(null);
  const searchInputRef = useRef<HTMLInputElement>(null);

  const sortOptions = [
    { value: 'relevance', label: 'Relevance', icon: '⭐' },
    { value: 'price-asc', label: 'Price: Low to High', icon: '📈' },
    { value: 'price-desc', label: 'Price: High to Low', icon: '📉' },
    { value: 'newest', label: 'Newest', icon: '🆕' },
    { value: 'discount', label: 'Best Discount', icon: '🏷️' },
  ];

  const handleSortChange = useCallback((option: string) => {
    setSortOption(option);
    setShowSortPopup(false);
  }, [setSortOption]);

  useEffect(() => {
    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      setScrollY(currentScrollY);
      setIsScrolled(currentScrollY > 20);
    };

    let ticking = false;
    const throttledScroll = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    };

    window.addEventListener('scroll', throttledScroll, { passive: true });
    return () => window.removeEventListener('scroll', throttledScroll);
  }, []);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (sortPopupRef.current && !sortPopupRef.current.contains(event.target as Node)) {
        setShowSortPopup(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const handleSearchFocus = useCallback(() => {
    setIsSearchFocused(true);
  }, []);

  const handleSearchBlur = useCallback(() => {
    setIsSearchFocused(false);
  }, []);

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        setShowSortPopup(false);
        setShowMobileMenu(false);
        searchInputRef.current?.blur();
      }
      if (event.key === '/' && !isSearchFocused) {
        event.preventDefault();
        searchInputRef.current?.focus();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [isSearchFocused]);

  useEffect(() => {
    if (debouncedSearchQuery.trim() === '') return;
    console.log('Searching for:', debouncedSearchQuery);
  }, [debouncedSearchQuery]);

  const headerClasses = `sticky top-0 z-40 transition-all duration-300 ${
    isScrolled
      ? 'bg-white/95 backdrop-blur-xl shadow-xl border-b border-gray-200/50'
      : 'bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 shadow-lg'
  }`;

  const textColor = isScrolled ? 'text-gray-900' : 'text-white';
  const buttonColor = isScrolled
    ? 'text-gray-700 hover:bg-gray-100'
    : 'text-white hover:bg-white/20';

  return (
    <>
      <Head>
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5, user-scalable=yes" />
      </Head>

      {}
      {showMobileMenu && (
        <div
          className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 lg:hidden animate-in fade-in duration-200"
          onClick={() => setShowMobileMenu(false)}
        >
          <div
            className="absolute right-0 top-0 h-full w-80 bg-white/95 backdrop-blur-xl shadow-2xl border-l border-gray-200/50 animate-in slide-in-from-right duration-300"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-6 border-b border-gray-200/80 bg-gradient-to-r from-blue-50 to-purple-50">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Sparkles className="h-6 w-6 text-blue-600" />
                  <h3 className="font-bold text-gray-900 text-xl">Menu</h3>
                </div>
                <button
                  onClick={() => setShowMobileMenu(false)}
                  className="p-2 hover:bg-gray-100 rounded-full transition-colors duration-200"
                >
                  <X className="h-6 w-6 text-gray-600" />
                </button>
              </div>
            </div>
            <nav className="p-6">
              <div className="space-y-2">
                {[
                  { href: '/privacy-policy-full', label: 'Full Privacy Policy', icon: '🔒' },
                  { href: '/terms-of-service-full', label: 'Full Terms of Service', icon: '📄' },
                  { href: '/account', label: 'Account', icon: '👤' },
                ].map((item) => (
                  <Link
                    key={item.href}
                    href={item.href}
                    className="flex items-center gap-4 py-4 px-4 text-gray-700 hover:text-blue-600 hover:bg-blue-50 rounded-xl transition-all duration-200 group"
                    onClick={() => setShowMobileMenu(false)}
                  >
                    <span className="text-xl group-hover:scale-110 transition-transform duration-200">
                      {item.icon}
                    </span>
                    <span className="font-medium text-lg">{item.label}</span>
                  </Link>
                ))}
              </div>
            </nav>
          </div>
        </div>
      )}

      <header className={headerClasses}>
        <div className="max-w-7xl mx-auto px-3 sm:px-6">
          {}
          <div className="flex items-center justify-between h-16 sm:h-20">
            {}
            <div className="flex items-center space-x-2 sm:space-x-4 min-w-0 flex-shrink-0">
              {}
              <button
                onClick={() => setShowMobileMenu(true)}
                className={`lg:hidden p-2.5 rounded-xl transition-all duration-200 hover:scale-105 ${buttonColor}`}
                aria-label="Open menu"
              >
                <Menu className="h-5 w-5 sm:h-6 sm:w-6" />
              </button>

              {showBackButton && (
                <button
                  onClick={onBack}
                  className={`p-2.5 rounded-xl transition-all duration-200 hover:scale-105 ${buttonColor}`}
                  aria-label="Go back"
                >
                  <ChevronLeft className="h-5 w-5 sm:h-6 sm:w-6" />
                </button>
              )}

              <Link href="/" className="flex items-center group min-w-0">
                <div className="relative w-10 h-10 sm:w-12 sm:h-12 mr-2 sm:mr-3 group-hover:scale-110 transition-transform duration-200 flex-shrink-0">
                  <div className="absolute inset-0 bg-white/20 backdrop-blur-sm rounded-xl shadow-lg"></div>
                  <Image
                    src="/Bhaba_logo.png"
                    alt="Bhaba Logo"
                    fill
                    className="rounded-xl p-1 object-contain"
                    priority
                    sizes="48px"
                  />
                </div>
                <div className="min-w-0 hidden sm:block">
                  <h1 className={`text-lg sm:text-xl lg:text-2xl font-bold transition-colors duration-300 truncate ${textColor}`}>
                    Bhaba
                  </h1>
                  <p className={`text-xs transition-colors duration-300 ${
                    isScrolled ? 'text-gray-500' : 'text-white/80'
                  }`}>
                    Discover Amazing
                  </p>
                </div>
              </Link>
            </div>

            {}
            <nav className="hidden lg:flex items-center space-x-1 flex-shrink-0">
              {[
                { href: '/privacy-policy-full', label: 'Privacy' },
                { href: '/terms-of-service-full', label: 'Terms' },
                { href: '/account', label: 'Account' },
              ].map((item) => (
                <Link
                  key={item.href}
                  href={item.href}
                  className={`px-4 py-2 text-sm font-medium rounded-xl transition-all duration-200 hover:scale-105 ${
                    isScrolled
                      ? 'text-gray-700 hover:text-blue-600 hover:bg-blue-50'
                      : 'text-white hover:text-gray-200 hover:bg-white/20'
                  }`}
                >
                  {item.label}
                </Link>
              ))}
            </nav>

            {}
            {showSearch && (
              <div className="hidden sm:flex flex-1 mx-4 lg:mx-6 min-w-0 max-w-2xl">
                <div className={`relative w-full transition-all duration-300 ${
                  isSearchFocused ? 'transform scale-105' : ''
                }`}>
                  <Search className={`absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 transition-colors duration-200 ${
                    isSearchFocused ? 'text-blue-500' : 'text-gray-400'
                  }`} />
                  <input
                    ref={searchInputRef}
                    type="text"
                    placeholder="Search for amazing products..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    onFocus={handleSearchFocus}
                    onBlur={handleSearchBlur}
                    className="w-full pl-12 pr-4 py-3 text-sm text-gray-900 bg-white/95 backdrop-blur-sm border border-gray-200/50 rounded-2xl focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-500 shadow-lg hover:shadow-xl transition-all duration-300"
                  />
                  {searchQuery && (
                    <div className="absolute right-4 top-1/2 transform -translate-y-1/2">
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {}
            <div className="hidden sm:flex items-center gap-2 flex-shrink-0">
              {}
              <button
                className={`p-2.5 rounded-xl transition-all duration-200 hover:scale-105 shadow-lg relative ${buttonColor}`}
                title="Notifications"
              >
                <Bell className="h-5 w-5" />
                <span className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full text-xs flex items-center justify-center">
                  <span className="w-1.5 h-1.5 bg-white rounded-full"></span>
                </span>
              </button>

              {}
              {showSort && (
                <select
                  value={sortOption}
                  onChange={(e) => setSortOption(e.target.value)}
                  className="text-sm border border-gray-200/50 rounded-xl px-3 py-2.5 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/95 backdrop-blur-sm shadow-lg hover:shadow-xl transition-all duration-200 cursor-pointer"
                >
                  {sortOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.icon} {option.label}
                    </option>
                  ))}
                </select>
              )}

              {}
              {showFilter && (
                <button
                  onClick={() => setShowFilters(true)}
                  className={`p-2.5 rounded-xl transition-all duration-200 hover:scale-105 shadow-lg ${buttonColor}`}
                  title="Filters"
                >
                  <Filter className="h-5 w-5" />
                </button>
              )}

              {}
              {showViewToggle && (
                <button
                  onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')}
                  className={`p-2.5 rounded-xl transition-all duration-200 hover:scale-105 shadow-lg ${buttonColor}`}
                  title={`Switch to ${viewMode === 'grid' ? 'list' : 'grid'} view`}
                >
                  {viewMode === 'grid' ? (
                    <List className="h-5 w-5" />
                  ) : (
                    <Grid className="h-5 w-5" />
                  )}
                </button>
              )}
            </div>

            {}
            <div className="flex sm:hidden items-center gap-2 flex-shrink-0">
              <button
                className={`p-2.5 rounded-xl transition-all duration-200 hover:scale-105 shadow-lg relative ${buttonColor}`}
                title="Notifications"
              >
                <Bell className="h-5 w-5" />
                <span className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full">
                  <span className="w-1.5 h-1.5 bg-white rounded-full absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"></span>
                </span>
              </button>
            </div>
          </div>

          {}
          {showSearch && (
            <div className="sm:hidden pb-4">
              <div className={`relative transition-all duration-300 ${
                isSearchFocused ? 'transform scale-[1.02]' : ''
              }`}>
                <Search className={`absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 transition-colors duration-200 ${
                  isSearchFocused ? 'text-blue-500' : 'text-gray-400'
                }`} />
                <input
                  type="text"
                  placeholder="Search for amazing products..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onFocus={handleSearchFocus}
                  onBlur={handleSearchBlur}
                  className="w-full pl-12 pr-4 py-4 text-base text-gray-900 bg-white/95 backdrop-blur-sm border border-gray-200/50 rounded-2xl focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-500 shadow-lg hover:shadow-xl transition-all duration-300"
                />
                {searchQuery && (
                  <div className="absolute right-4 top-1/2 transform -translate-y-1/2">
                    <div className="w-2.5 h-2.5 bg-blue-500 rounded-full animate-pulse"></div>
                  </div>
                )}
              </div>
            </div>
          )}

          {}
          <div className="sm:hidden flex items-center justify-between pb-3">
            <div className="flex items-center gap-2">
              {}
              {showSort && (
                <div className="relative" ref={sortPopupRef}>
                  <button
                    onClick={() => setShowSortPopup(!showSortPopup)}
                    className={`flex items-center gap-2 px-4 py-2.5 rounded-xl transition-all duration-200 hover:scale-105 shadow-lg text-sm font-medium ${
                      showSortPopup
                        ? 'bg-blue-500 text-white shadow-blue-500/50'
                        : buttonColor
                    }`}
                  >
                    <ArrowUpDown className="h-4 w-4" />
                    <span>Sort</span>
                  </button>

                  {showSortPopup && (
                    <div className="absolute left-0 mt-2 w-64 bg-white/95 backdrop-blur-xl rounded-2xl shadow-2xl border border-gray-200/50 z-50 py-2 animate-in fade-in slide-in-from-top-2 duration-200">
                      {sortOptions.map((option) => (
                        <button
                          key={option.value}
                          onClick={() => handleSortChange(option.value)}
                          className={`flex items-center gap-3 w-full text-left px-4 py-3 text-sm transition-all duration-200 hover:scale-95 ${
                            sortOption === option.value
                              ? 'bg-blue-100 text-blue-800 font-medium'
                              : 'text-gray-700 hover:bg-gray-50'
                          }`}
                        >
                          <span className="text-base">{option.icon}</span>
                          {option.label}
                        </button>
                      ))}
                    </div>
                  )}
                </div>
              )}

              {}
              {showFilter && (
                <button
                  onClick={() => setShowFilters(true)}
                  className={`flex items-center gap-2 px-4 py-2.5 rounded-xl transition-all duration-200 hover:scale-105 shadow-lg text-sm font-medium ${buttonColor}`}
                >
                  <Filter className="h-4 w-4" />
                  <span>Filter</span>
                </button>
              )}
            </div>

            {}
            {showViewToggle && (
              <button
                onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')}
                className={`flex items-center gap-2 px-4 py-2.5 rounded-xl transition-all duration-200 hover:scale-105 shadow-lg text-sm font-medium ${buttonColor}`}
              >
                {viewMode === 'grid' ? (
                  <>
                    <List className="h-4 w-4" />
                    <span>List</span>
                  </>
                ) : (
                  <>
                    <Grid className="h-4 w-4" />
                    <span>Grid</span>
                  </>
                )}
              </button>
            )}
          </div>
        </div>

        {}
        <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 opacity-30"></div>
      </header>
    </>
  );
});

HeaderBar.displayName = 'HeaderBar';

export default HeaderBar;

================================================================================

FILE 8: C:\src\Bhaba_com\bhaba-marketplace\src\components\LazyImage.tsx
================================================================================
import { useState } from 'react'
import Image from 'next/image'
import { AlertCircle } from 'lucide-react'

interface LazyImageProps {
  src: string
  alt: string
  width: number
  height: number
  className?: string
}

const LazyImage: React.FC<LazyImageProps> = ({ src, alt, width, height, className }) => {
  const [hasError, setHasError] = useState(false)

  if (hasError) {
    return (
      <div className={`${className} bg-gray-100 flex items-center justify-center`}>
        <div className="text-center p-4">
          <AlertCircle className="h-8 w-8 text-gray-400 mx-auto mb-2" />
          <p className="text-sm text-gray-500">Image not available</p>
        </div>
      </div>
    )
  }

  return (
    <Image
      src={src}
      alt={alt}
      width={width}
      height={height}
      className={className}
      loading="lazy"
      onError={() => setHasError(true)}
    />
  )
}

export default LazyImage

================================================================================

FILE 9: C:\src\Bhaba_com\bhaba-marketplace\src\components\LoadingOverlay.tsx
================================================================================
import React from 'react'

const LoadingOverlay = () => {
  return (
    <div className="fixed inset-0 bg-white bg-opacity-90 z-50 flex items-center justify-center">
      <div className="flex space-x-2">
        {[...Array(3)].map((_, i) => (
          <div
            key={i}
            className="w-4 h-4 rounded-full animate-bounce"
            style={{
              backgroundColor: ['#3B82F6', '#10B981', '#F59E0B'][i],
              animationDelay: `${i * 0.1}s`
            }}
          />
        ))}
      </div>
    </div>
  )
}

export default LoadingOverlay

================================================================================

FILE 10: C:\src\Bhaba_com\bhaba-marketplace\src\components\OptimizedImage.tsx
================================================================================
import React, { useState, useCallback } from 'react'
import Image from 'next/image'
import { AlertCircle } from 'lucide-react'

interface OptimizedImageProps {
  src: string
  alt: string
  width?: number
  height?: number
  fill?: boolean
  className?: string
  priority?: boolean
  sizes?: string
  quality?: number
  onLoad?: () => void
  onError?: () => void
  fallbackSrc?: string
}

const OptimizedImage: React.FC<OptimizedImageProps> = ({
  src,
  alt,
  width,
  height,
  fill = false,
  className = '',
  priority = false,
  sizes = "(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw",
  quality = 75,
  onLoad,
  onError,
  fallbackSrc = '/placeholder-image.jpg'
}) => {
  const [imgSrc, setImgSrc] = useState(src)
  const [isLoading, setIsLoading] = useState(true)
  const [hasError, setHasError] = useState(false)

  const handleLoad = useCallback(() => {
    setIsLoading(false)
    onLoad?.()
  }, [onLoad])

  const handleError = useCallback(() => {
    if (imgSrc !== fallbackSrc) {
      setImgSrc(fallbackSrc)
    } else {
      setHasError(true)
      setIsLoading(false)
    }
    onError?.()
  }, [imgSrc, fallbackSrc, onError])

  if (hasError) {
    return (
      <div className={`bg-gray-100 flex items-center justify-center ${className}`}>
        <div className="text-center p-4">
          <AlertCircle className="h-8 w-8 text-gray-400 mx-auto mb-2" />
          <p className="text-sm text-gray-500">Image not available</p>
        </div>
      </div>
    )
  }

  const imageProps = {
    src: imgSrc,
    alt,
    onLoad: handleLoad,
    onError: handleError,
    className: `${className} ${isLoading ? 'opacity-0' : 'opacity-100'} transition-opacity duration-300`,
    priority,
    quality,
    sizes,
    ...(fill ? { fill: true } : { width, height })
  }

  return (
    <div className="relative">
      {isLoading && (
        <div className={`absolute inset-0 bg-gray-200 animate-pulse ${fill ? '' : 'w-full h-full'}`} />
      )}
      <Image {...imageProps} />
    </div>
  )
}

export default OptimizedImage

================================================================================

FILE 11: C:\src\Bhaba_com\bhaba-marketplace\src\components\OptimizedProductCard.tsx
================================================================================
import React, { memo, useState, useCallback } from 'react'
import { Phone, MessageCircle } from 'lucide-react'
import Image from 'next/image'
import { formatCurrency } from '@/utils/formatCurrency'
import { useRouter } from 'next/router'
import { slugify } from '@/utils/api'

interface Product {
  id: string
  productId: string
  product_name: string
  price: number
  description: string
  discount: number
  details: string
  tier_pricing: string[]
  product_images: string[]
  mobile_number: string
  isAvailable: boolean
  moq: number
  added_at: string
  vendorId: string
  vendorName: string
  categoryId: string
  categoryName: string
}

interface ProductCardProps {
  product: Product
  onClick?: (product: Product) => void
  viewMode?: 'grid' | 'list'
  priority?: boolean
  sizes?: string
}

const OptimizedProductCard = memo<ProductCardProps>(({
  product,
  onClick,
  viewMode = 'grid',
  priority = false,
  sizes = "(max-width: 640px) 50vw, (max-width: 768px) 33vw, (max-width: 1024px) 25vw, 20vw"
}) => {
  const router = useRouter()
  const [imageLoaded, setImageLoaded] = useState(false)
  const [imageError, setImageError] = useState(false)

  const discountedPrice = product.discount > 0
    ? product.price * (1 - product.discount / 100)
    : product.price

  const handleContactVendor = useCallback((e: React.MouseEvent, type: 'whatsapp' | 'call') => {
    e.preventDefault()
    e.stopPropagation()

    const hardcodedNumber = '0618205278'
    const productImage = product.product_images?.[0] || ''
    const originalPrice = formatCurrency(product.price)
    const finalPrice = formatCurrency(discountedPrice)
    const discountText = product.discount > 0 ? ` (${product.discount}% OFF)` : ''

    let message = `Hi, I'm interested in your product:\n\n`
    message += `*Product Name:* ${product.product_name}\n`
    message += `*Price:* ${finalPrice}${discountText}\n`
    if (product.discount > 0) {
      message += `*Original Price:* ${originalPrice}\n`
    }
    message += `*Category:* ${product.categoryName}\n`
    if (product.description) {
      message += `\n*Description:* ${product.description}\n`
    }
    message += `\nPlease let me know more about this product.`

    try {
      if (type === 'whatsapp') {
        if (productImage) {
          message += `\n\n*Product Image:* ${productImage}`
        }

        let cleanNumber = hardcodedNumber.replace(/[^\d+]/g, '')

        if (cleanNumber.startsWith('+255')) {
          cleanNumber = cleanNumber.substring(1)
        } else if (cleanNumber.startsWith('255')) {
        } else if (cleanNumber.startsWith('0')) {
          cleanNumber = '255' + cleanNumber.substring(1)
        } else {
          cleanNumber = '255' + cleanNumber
        }

        const whatsappUrl = `https://wa.me/${cleanNumber}?text=${encodeURIComponent(message)}`
        window.open(whatsappUrl, '_blank')

      } else if (type === 'call') {
        const callUrl = `tel:${hardcodedNumber}`
        window.location.href = callUrl
      }
    } catch (error) {
      console.error('Error handling contact:', error)
    }
  }, [product, discountedPrice])

  const handleClick = useCallback(() => {
    if (onClick) {
      onClick(product)
    } else {
      const slug = `${slugify(product.product_name)}_${product.id}`
      const categorySlug = product.categoryName.toLowerCase().replace(/\s+/g, '-')
      router.push(`/product/${categorySlug}/${slug}`)
    }
  }, [onClick, product, router])

  const handleImageLoad = useCallback(() => {
    setImageLoaded(true)
  }, [])

  const handleImageError = useCallback(() => {
    setImageError(true)
    setImageLoaded(true)
  }, [])

  if (viewMode === 'list') {
    return (
      <div
        className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 hover:shadow-md transition-all duration-300 cursor-pointer flex gap-4 w-full"
        onClick={handleClick}
      >
        {}
        <div className="relative w-24 h-24 flex-shrink-0 bg-gray-100 rounded-lg overflow-hidden">
          {!imageError ? (
            <Image
              src={product.product_images?.[0] || '/placeholder-image.jpg'}
              alt={product.product_name}
              fill
              className={`object-cover transition-opacity duration-300 ${
                imageLoaded ? 'opacity-100' : 'opacity-0'
              }`}
              onLoad={handleImageLoad}
              onError={handleImageError}
              sizes="96px"
              priority={priority}
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center text-gray-400 text-xs">
              No Image
            </div>
          )}

          {!imageLoaded && !imageError && (
            <div className="absolute inset-0 bg-gray-200 animate-pulse" />
          )}
        </div>

        {}
        <div className="flex-1 min-w-0">
          <h3 className="font-semibold text-gray-900 text-sm mb-1 line-clamp-2">
            {product.product_name}
          </h3>
          <p className="text-xs text-gray-600 mb-2 truncate">{product.vendorName}</p>
          <div className="flex items-center justify-between">
            <div className="flex flex-col">
              <span className="text-lg font-bold text-blue-600">
                {formatCurrency(discountedPrice)}
              </span>
              {product.discount > 0 && (
                <span className="text-sm text-gray-500 line-through">
                  {formatCurrency(product.price)}
                </span>
              )}
            </div>
            <div className="flex gap-2">
              <button
                onClick={(e) => handleContactVendor(e, 'whatsapp')}
                className="p-2 bg-green-500 text-white rounded-full hover:bg-green-600 transition-colors"
                title="WhatsApp"
                type="button"
              >
                <MessageCircle className="h-4 w-4" />
              </button>
              <button
                onClick={(e) => handleContactVendor(e, 'call')}
                className="p-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition-colors"
                title="Call"
                type="button"
              >
                <Phone className="h-4 w-4" />
              </button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div
      className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-lg transition-all duration-300 cursor-pointer group w-full break-inside-avoid mb-4"
      onClick={handleClick}
    >
      {}
      <div className="relative w-full aspect-square bg-gray-100 overflow-hidden">
        {!imageError ? (
          <Image
            src={product.product_images?.[0] || '/placeholder-image.jpg'}
            alt={product.product_name}
            fill
            className={`object-cover group-hover:scale-105 transition-all duration-300 ${
              imageLoaded ? 'opacity-100' : 'opacity-0'
            }`}
            onLoad={handleImageLoad}
            onError={handleImageError}
            sizes={sizes}
            priority={priority}
            quality={75}
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center text-gray-400 bg-gray-100">
            <div className="text-center p-4">
              <div className="text-2xl mb-2">📦</div>
              <div className="text-xs">No Image</div>
            </div>
          </div>
        )}

        {}
        {!imageLoaded && !imageError && (
          <div className="absolute inset-0 bg-gray-200 animate-pulse" />
        )}

        {}
        {product.discount > 0 && (
          <div className="absolute top-2 left-2 bg-red-500 text-white px-2 py-1 rounded-md text-xs font-semibold z-10">
            -{product.discount}%
          </div>
        )}

        {}
        {!product.isAvailable && (
          <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center z-10">
            <span className="bg-red-500 text-white px-3 py-1 rounded-md text-sm font-semibold">
              Out of Stock
            </span>
          </div>
        )}
      </div>

      {}
      <div className="p-3 sm:p-4 space-y-2">
        {}
        <h3 className="font-semibold text-gray-900 text-sm leading-tight h-10 overflow-hidden">
          <span className="line-clamp-2">{product.product_name}</span>
        </h3>

        {}
        <p className="text-xs text-gray-600 h-8 overflow-hidden">
          <span className="line-clamp-2">{product.description}</span>
        </p>

        {}
        <div className="space-y-1">
          <p className="text-xs text-gray-600 truncate">{product.vendorName}</p>
          <p className="text-xs text-blue-600 truncate">{product.categoryName}</p>
        </div>

        {}
        <div className="h-12 flex flex-col justify-center">
          <div className="flex items-center gap-2">
            <span className="text-base sm:text-lg font-bold text-blue-600">
              {formatCurrency(discountedPrice)}
            </span>
            {product.discount > 0 && (
              <span className="text-xs sm:text-sm text-gray-500 line-through">
                {formatCurrency(product.price)}
              </span>
            )}
          </div>
        </div>

        {}
        <div className="flex gap-2 h-8">
          <button
            onClick={(e) => handleContactVendor(e, 'whatsapp')}
            className="flex-1 bg-green-500 text-white py-1 px-2 rounded-md hover:bg-green-600 transition-colors flex items-center justify-center text-xs font-medium"
            type="button"
          >
            <MessageCircle className="h-3 w-3 mr-1" />
            <span className="hidden xs:inline">WhatsApp</span>
          </button>
          <button
            onClick={(e) => handleContactVendor(e, 'call')}
            className="flex-1 bg-blue-500 text-white py-1 px-2 rounded-md hover:bg-blue-600 transition-colors flex items-center justify-center text-xs font-medium"
            type="button"
          >
            <Phone className="h-3 w-3 mr-1" />
            <span className="hidden xs:inline">Call</span>
          </button>
        </div>
      </div>
    </div>
  )
})

OptimizedProductCard.displayName = 'OptimizedProductCard'

export default OptimizedProductCard

export const LazyLoadSection: React.FC<{
  children: React.ReactNode
  className?: string
  threshold?: number
}> = ({ children, className = '', threshold = 0.1 }) => {
  const [isVisible, setIsVisible] = useState(false)
  const [ref, setRef] = useState<HTMLDivElement | null>(null)

  React.useEffect(() => {
    if (!ref) return

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true)
          observer.unobserve(ref)
        }
      },
      { threshold }
    )

    observer.observe(ref)

    return () => observer.disconnect()
  }, [ref, threshold])

  return (
    <div ref={setRef} className={className}>
      {isVisible ? children : <div className="h-64 bg-gray-100 animate-pulse rounded-lg" />}
    </div>
  )
}

export class ErrorBoundary extends React.Component<
  { children: React.ReactNode; fallback?: React.ReactNode },
  { hasError: boolean }
> {
  constructor(props: { children: React.ReactNode; fallback?: React.ReactNode }) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(): { hasError: boolean } {
    return { hasError: true }
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo)
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || (
        <div className="text-center py-8">
          <div className="text-red-500 mb-2">⚠️</div>
          <p className="text-gray-600">Something went wrong. Please refresh the page.</p>
        </div>
      )
    }

    return this.props.children
  }
}

================================================================================

FILE 12: C:\src\Bhaba_com\bhaba-marketplace\src\components\ProductCard.tsx
================================================================================
import React from 'react'
import { Phone, MessageCircle } from 'lucide-react'
import { formatCurrency } from '@/utils/formatCurrency'
import { useRouter } from 'next/router'
import { slugify } from '@/utils/api'
import DynamicAspectRatioImage from './DynamicAspectRatioImage'

interface Product {
  id: string
  productId: string
  product_name: string
  price: number
  description: string
  discount: number
  details: string
  tier_pricing: string[]
  product_images: string[]
  mobile_number: string
  isAvailable: boolean
  moq: number
  added_at: string
  vendorId: string
  vendorName: string
  categoryId: string
  categoryName: string
}

interface ProductCardProps {
  product: Product
  onClick?: (product: Product) => void
  viewMode?: 'grid' | 'list'
}

const ProductCard: React.FC<ProductCardProps> = React.memo(({ product, onClick, viewMode = 'grid' }) => {
  const router = useRouter()
  const discountedPrice = product.discount > 0
    ? product.price * (1 - product.discount / 100)
    : product.price

    const handleContactVendor = (e: React.MouseEvent, type: 'whatsapp' | 'call') => {
    e.preventDefault()
    e.stopPropagation()

    const hardcodedNumber = '0618205278';

    const productImage = product.product_images?.[0] || ''
    const originalPrice = formatCurrency(product.price)
    const finalPrice = formatCurrency(discountedPrice)
    const discountText = product.discount > 0 ? ` (${product.discount}% OFF)` : ''

    let message = `Hi, I'm interested in your product:\n\n`
    message += `*Product Name:* ${product.product_name}\n`
    message += `*Price:* ${finalPrice}${discountText}\n`
    if (product.discount > 0) {
      message += `*Original Price:* ${originalPrice}\n`
    }
    message += `*Category:* ${product.categoryName}\n`
    if (product.description) {
      message += `\n*Description:* ${product.description}\n`
    }
    message += `\nPlease let me know more about this product.`

    try {
      if (type === 'whatsapp') {
        if (productImage) {
          message += `\n\n*Product Image:* ${productImage}`
        }

        let cleanNumber = hardcodedNumber.replace(/[^\d+]/g, '')

        if (cleanNumber.startsWith('+255')) {
          cleanNumber = cleanNumber.substring(1)
        } else if (cleanNumber.startsWith('255')) {
        } else if (cleanNumber.startsWith('0')) {
          cleanNumber = '255' + cleanNumber.substring(1)
        } else {
          cleanNumber = '255' + cleanNumber
        }

        const whatsappUrl = `https://wa.me/${cleanNumber}?text=${encodeURIComponent(message)}`
        window.open(whatsappUrl, '_blank')

      } else if (type === 'call') {
        const callUrl = `tel:${hardcodedNumber}`
        window.location.href = callUrl
      }
    } catch (error) {
      console.error('Error handling contact:', error)
      alert('Unable to open contact method. Please try again.')
    }
  }

const handleClick = () => {
  if (onClick) {
    onClick(product)
  } else {
    const slug = `${slugify(product.product_name)}_${product.id}`
    router.push(`/product/${product.categoryName.toLowerCase().replace(/\s+/g, '-')}/${slug}`)
  }
}

  if (viewMode === 'list') {
    return (
      <div
        className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 hover:shadow-md transition-all duration-300 cursor-pointer flex gap-4 w-full"
        onClick={handleClick}
      >
      {}
        <div className="relative w-24 h-24 flex-shrink-0">
          {}
          <DynamicAspectRatioImage imageUrl={product.product_images?.[0] || '/placeholder-image.jpg'} />
        </div>

        {}
        <div className="flex-1 min-w-0">
          <h3 className="font-semibold text-gray-900 text-sm mb-1 truncate">{product.product_name}</h3>
          <p className="text-xs text-gray-600 mb-2">{product.vendorName}</p>
          <div className="flex items-center justify-between">
            <div className="flex flex-col">
              <span className="text-lg font-bold text-blue-600">{formatCurrency(discountedPrice)}</span>
              {product.discount > 0 && (
                <span className="text-sm text-gray-500 line-through">{formatCurrency(product.price)}</span>
              )}
            </div>
            <div className="flex gap-2">
              <button
                onClick={(e) => handleContactVendor(e, 'whatsapp')}
                className="p-2 bg-green-500 text-white rounded-full hover:bg-green-600 transition-colors"
                title="WhatsApp"
              >
                <MessageCircle className="h-4 w-4" />
              </button>
              <button
                onClick={(e) => handleContactVendor(e, 'call')}
                className="p-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition-colors"
                title="Call"
              >
                <Phone className="h-4 w-4" />
              </button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div
      className="bg-gray-10 rounded-lg shadow-sm border border-green-600 overflow-hidden hover:shadow-lg transition-all duration-300 cursor-pointer group w-full"
      onClick={handleClick}
    >
      {}
{}

   <div className="w-full relative flex-shrink-0">
      <DynamicAspectRatioImage imageUrl={product.product_images?.[0] || '/placeholder-image.jpg'} />

        {}
        {product.discount > 0 && (
          <div className="absolute top-2 left-2 bg-red-500 text-white px-2 py-1 rounded-md text-xs font-semibold">
            -{product.discount}%
          </div>
        )}

        {}
        {!product.isAvailable && (
          <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <span className="bg-red-500 text-white px-3 py-1 rounded-md text-sm font-semibold">
              Out of Stock
            </span>
          </div>
        )}
      </div>

      {}
      <div className="p-3 sm:p-4">
        <h3 className="font-semibold text-gray-900 text-sm mb-1 line-clamp-2">{product.product_name}</h3>
        <p className="text-xs text-gray-600 mb-2 line-clamp-2 sm:line-clamp-3">{product.description}</p>
        <p className="text-xs text-gray-600 mb-2">{product.vendorName}</p>
        <p className="text-xs text-blue-600 mb-3">{product.categoryName}</p>

        <div className="flex items-center justify-between mb-3">
          <div className="flex flex-col">
            <span className="text-base sm:text-lg font-bold text-blue-600">{formatCurrency(discountedPrice)}</span>
            {product.discount > 0 && (
              <span className="text-xs sm:text-sm text-gray-500 line-through">{formatCurrency(product.price)}</span>
            )}
          </div>
        </div>

        <div className="flex gap-2">
          <button
            onClick={(e) => handleContactVendor(e, 'whatsapp')}
            className="flex-1 bg-green-500 text-white py-1 sm:py-2 px-2 sm:px-3 rounded-md hover:bg-green-600 transition-colors flex items-center justify-center gap-1 sm:gap-2 text-xs sm:text-sm"
          >
            <MessageCircle className="h-3 w-3 sm:h-4 sm:w-4" />
            <span className="hidden xs:inline">WhatsApp</span>
          </button>
          <button
            onClick={(e) => handleContactVendor(e, 'call')}
            className="flex-1 bg-blue-500 text-white py-1 sm:py-2 px-2 sm:px-3 rounded-md hover:bg-blue-600 transition-colors flex items-center justify-center gap-1 sm:gap-2 text-xs sm:text-sm"
          >
            <Phone className="h-3 w-3 sm:h-4 sm:w-4" />
            <span className="hidden xs:inline">Call</span>
          </button>
        </div>
      </div>
    </div>

   );
});
ProductCard.displayName = 'ProductCard';

export default ProductCard

================================================================================

FILE 13: C:\src\Bhaba_com\bhaba-marketplace\src\components\ProductGrid.tsx
================================================================================
(File contains no non-comment code)

================================================================================

FILE 14: C:\src\Bhaba_com\bhaba-marketplace\src\components\SEOHead.tsx
================================================================================
import Head from 'next/head'
import { useRouter } from 'next/router'

interface Product {
  id: string
  product_name: string
  price: number
  description: string
  product_images: string[]
  categoryName: string
  vendorName: string
  discount: number
  isAvailable: boolean
}

interface SEOHeadProps {
  title?: string
  description?: string
  keywords?: string[]
  product?: Product
  canonical?: string
  noIndex?: boolean
}

const SEOHead: React.FC<SEOHeadProps> = ({
  title = "Bhaba Marketplace - Shop Online in Tanzania",
  description = "Discover the best products at affordable prices in Tanzania. Shop electronics, clothing, shoes and more from verified vendors.",
  keywords = ["Tanzania shopping", "online marketplace", "electronics", "clothing", "wholesale"],
  product,
  canonical,
  noIndex = false
}) => {
  const router = useRouter()
  const baseUrl = "https://yourstore.com" // Replace with your actual domain
  const currentUrl = canonical || `${baseUrl}${router.asPath}`

  const productSEO = product ? {
    title: `${product.product_name} - ${product.categoryName} | Bhaba Marketplace`,
    description: `Buy ${product.product_name} at ${formatPrice(product.price)} in Tanzania. ${product.description}`,
    keywords: [product.product_name, product.categoryName, product.vendorName, "Tanzania", "buy online"],
    price: product.discount > 0 ?
      product.price * (1 - product.discount / 100) :
      product.price
  } : null

  const finalTitle = productSEO?.title || title
  const finalDescription = productSEO?.description || description
  const finalKeywords = productSEO?.keywords || keywords

  const productStructuredData = product ? {
    "@context": "https://schema.org/",
    "@type": "Product",
    "name": product.product_name,
    "description": product.description,
    "image": product.product_images,
    "category": product.categoryName,
    "brand": {
      "@type": "Brand",
      "name": product.vendorName
    },
    "offers": {
      "@type": "Offer",
      "price": productSEO?.price,
      "priceCurrency": "TZS",
      "availability": product.isAvailable ?
        "https://schema.org/InStock" :
        "https://schema.org/OutOfStock",
      "seller": {
        "@type": "Organization",
        "name": product.vendorName
      }
    }
  } : null

  const organizationStructuredData = {
    "@context": "https://schema.org",
    "@type": "Organization",
    "name": "Bhaba Marketplace",
    "url": baseUrl,
    "logo": `${baseUrl}/Bhaba_logo.png`,
    "sameAs": [
      "https://www.facebook.com/bhabamarketplace",
      "https://www.instagram.com/bhabamarketplace"
    ],
    "contactPoint": {
      "@type": "ContactPoint",
      "telephone": "+255-618-205-278",
      "contactType": "customer service",
      "availableLanguage": ["English", "Swahili"]
    }
  }

  return (
    <Head>
      {}
      <title>{finalTitle}</title>
      <meta name="description" content={finalDescription} />
      <meta name="keywords" content={finalKeywords.join(', ')} />
      {noIndex && <meta name="robots" content="noindex, nofollow" />}

      {}
      <link rel="canonical" href={currentUrl} />

      {}
      <meta property="og:title" content={finalTitle} />
      <meta property="og:description" content={finalDescription} />
      <meta property="og:type" content={product ? "product" : "website"} />
      <meta property="og:url" content={currentUrl} />
      <meta property="og:site_name" content="Bhaba Marketplace" />
      <meta property="og:locale" content="en_TZ" />
      {product?.product_images?.[0] && (
        <meta property="og:image" content={product.product_images[0]} />
      )}

      {}
      <meta name="twitter:card" content="summary_large_image" />
      <meta name="twitter:title" content={finalTitle} />
      <meta name="twitter:description" content={finalDescription} />
      {product?.product_images?.[0] && (
        <meta name="twitter:image" content={product.product_images[0]} />
      )}

      {}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(organizationStructuredData)
        }}
      />

      {productStructuredData && (
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify(productStructuredData)
          }}
        />
      )}

      {}
      <meta name="author" content="Bhaba Limited" />
      <meta name="copyright" content="Bhaba Limited" />
      <meta name="language" content="English" />
      <meta name="revisit-after" content="7 days" />
      <meta name="distribution" content="global" />
      <meta name="rating" content="general" />

      {}
      <meta name="geo.region" content="TZ" />
      <meta name="geo.country" content="Tanzania" />
      <meta name="geo.placename" content="Dar es Salaam" />
    </Head>
  )
}

const formatPrice = (price: number) => {
  return new Intl.NumberFormat('en-TZ', {
    style: 'currency',
    currency: 'TZS',
    minimumFractionDigits: 0,
  }).format(price)
}

export default SEOHead

================================================================================

FILE 15: C:\src\Bhaba_com\bhaba-marketplace\src\hooks\useAnalytics.ts
================================================================================
import { useEffect, useCallback } from 'react'
import { useRouter } from 'next/router'

export const useAnalytics = () => {
  const router = useRouter()

  const trackEvent = useCallback((eventName: string, parameters?: Record<string, unknown>) => {
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', eventName, {
        event_category: 'engagement',
        ...parameters
      })
    }
  }, [])

  const trackPageView = useCallback((url: string) => {
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('config', 'G-5EXTZ4D9MW', {
        page_path: url,
      })
    }
  }, [])

  const trackTiming = useCallback((name: string, value: number) => {
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'timing_complete', {
        name,
        value: Math.round(value),
        event_category: 'performance'
      })
    }
  }, [])

  const trackError = useCallback((error: Error, context?: string) => {
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'exception', {
        description: error.message,
        fatal: false,
        custom_map: {
          context: context || 'unknown'
        }
      })
    }
  }, [])

  useEffect(() => {
    const handleRouteChange = (url: string) => {
      trackPageView(url)
    }

    router.events.on('routeChangeComplete', handleRouteChange)
    return () => {
      router.events.off('routeChangeComplete', handleRouteChange)
    }
  }, [router, trackPageView])

  return {
    trackEvent,
    trackPageView,
    trackTiming,
    trackError
  }
}

================================================================================

FILE 16: C:\src\Bhaba_com\bhaba-marketplace\src\hooks\useDebounce.ts
================================================================================
import { useState, useEffect } from 'react';

export const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};

================================================================================

FILE 17: C:\src\Bhaba_com\bhaba-marketplace\src\hooks\usePerformance.ts
================================================================================
import { useEffect, useRef, useCallback } from 'react'

export const usePerformance = (componentName: string) => {
  const renderStart = useRef<number>(0)
  const mounted = useRef<boolean>(false)

  useEffect(() => {
    if (!mounted.current) {
      renderStart.current = performance.now()
      mounted.current = true
    }
  }, [])

  useEffect(() => {
    return () => {
      if (renderStart.current > 0) {
        const renderTime = performance.now() - renderStart.current
        if (renderTime > 16) {
          console.warn(`Slow render detected: ${componentName} took ${renderTime.toFixed(2)}ms`)
        }
      }
    }
  }, [componentName])

  const recordRenderStart = useCallback(() => {
    renderStart.current = performance.now()
  }, [])

  const recordRenderEnd = useCallback(() => {
    if (renderStart.current > 0) {
      const renderTime = performance.now() - renderStart.current
      if (renderTime > 16) {
        console.warn(`Slow render detected: ${componentName} took ${renderTime.toFixed(2)}ms`)
      }
      return renderTime
    }
    return 0
  }, [componentName])

  return { recordRenderStart, recordRenderEnd }
}

================================================================================

FILE 18: C:\src\Bhaba_com\bhaba-marketplace\src\hooks\usePerformanceMonitor.ts
================================================================================
import { useEffect, useCallback } from 'react'

export const usePerformanceMonitor = () => {
  const measurePageLoad = useCallback(() => {
    if (typeof window === 'undefined' || !window.performance) {
      return null
    }

    try {
      const perfData = window.performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming

      if (perfData) {
        const metrics = {
          dns: perfData.domainLookupEnd - perfData.domainLookupStart,
          tcp: perfData.connectEnd - perfData.connectStart,
          request: perfData.responseStart - perfData.requestStart,
          response: perfData.responseEnd - perfData.responseStart,
          domLoading: perfData.domContentLoadedEventEnd - perfData.responseEnd,
          total: perfData.loadEventEnd - perfData.fetchStart
        }

        if (process.env.NODE_ENV === 'development') {
          console.log('Page Load Performance:', metrics)
        }

        return metrics
      }
    } catch (error) {
      console.warn('Performance measurement failed:', error)
    }

    return null
  }, [])

  useEffect(() => {
    const handleLoad = () => {
      setTimeout(measurePageLoad, 100)
    }

    if (typeof window !== 'undefined') {
      if (document.readyState === 'complete') {
        handleLoad()
      } else {
        window.addEventListener('load', handleLoad)
        return () => window.removeEventListener('load', handleLoad)
      }
    }
  }, [measurePageLoad])

  return { measurePageLoad }
}

================================================================================

FILE 19: C:\src\Bhaba_com\bhaba-marketplace\src\hooks\useProducts.ts
================================================================================
import { useQuery } from '@tanstack/react-query';
import { SearchParams ,Product } from '@/utils/api';

const API_BASE = process.env.NEXT_PUBLIC_API_BASE || 'https://bhababackend.onrender.com';

const fetchProducts = async (
  params: SearchParams
): Promise<{ products: Product[]; total: number }> => {
  const queryParams = new URLSearchParams();

  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined && value !== null && value !== '') {
      queryParams.append(key, String(value));
    }
  });

  const response = await fetch(`${API_BASE}/search?${queryParams.toString()}`);
  if (!response.ok) {
    throw new Error('Network response was not ok');
  }
  return response.json();
};

export const useProducts = (params: SearchParams) => {
  return useQuery({
    queryKey: ['products', params],
    queryFn: () => fetchProducts(params),
    staleTime: 5 * 60 * 1000,
    gcTime: 30 * 60 * 1000,
  });
};

================================================================================

FILE 20: C:\src\Bhaba_com\bhaba-marketplace\src\pages\_app.tsx
================================================================================
import Script from 'next/script'
import Head from 'next/head'
import '@/styles/globals.css'
import type { AppProps } from 'next/app'
import { useState, useEffect, useRef, Suspense } from 'react'
import { useRouter } from 'next/router'
import { Loader2, AlertCircle, Wifi, WifiOff } from 'lucide-react'
import dynamic from 'next/dynamic'
import { fetchAllProducts, fetchVendors, fetchAllCategories, PaginatedResponse } from '@/utils/api'
import type { Product, Vendor, Category } from '@/utils/api'
import { usePerformanceMonitor } from '../hooks/usePerformanceMonitor'

const AppDownloadBanner = dynamic(() => import('../components/AppDownloadBanner'), {
  ssr: false,
  loading: () => null
})

const ErrorBoundary = dynamic(() => import('../components/ErrorBoundary'), {
  ssr: false,
  loading: () => <div>Loading...</div>
})

interface ExtendedPageProps {
  products: PaginatedResponse<Product>
  vendors: Vendor[]
  categories: Category[]
}

const PerformanceMonitor = () => {
  useEffect(() => {
    if (typeof window !== 'undefined' && 'performance' in window) {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.entryType === 'navigation') {
            const navEntry = entry as PerformanceNavigationTiming
            const metrics = {
              dns: navEntry.domainLookupEnd - navEntry.domainLookupStart,
              tcp: navEntry.connectEnd - navEntry.connectStart,
              request: navEntry.responseStart - navEntry.requestStart,
              response: navEntry.responseEnd - navEntry.responseStart,
              domLoading: navEntry.domContentLoadedEventEnd - navEntry.responseEnd,
              total: navEntry.loadEventEnd - navEntry.fetchStart
            }

            if (process.env.NODE_ENV === 'development') {
              console.log('Page Load Performance:', metrics)
            }

            if (metrics.total > 3000 && typeof window !== 'undefined' && window.gtag) {
              window.gtag('event', 'slow_page_load', {
                event_category: 'performance',
                value: Math.round(metrics.total),
                custom_map: {
                  dns_time: Math.round(metrics.dns),
                  tcp_time: Math.round(metrics.tcp),
                  request_time: Math.round(metrics.request),
                  response_time: Math.round(metrics.response),
                  dom_loading_time: Math.round(metrics.domLoading)
                }
              })
            }
          }
        }
      })

      try {
        observer.observe({ entryTypes: ['navigation'] })
      } catch (error) {
        console.warn('Performance observer not supported:', error)
      }

      return () => observer.disconnect()
    }
  }, [])

  useEffect(() => {
    if (typeof window !== 'undefined' && window.performance) {
      const measurePageLoad = () => {
        const perfData = window.performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming

        if (perfData) {
          const loadTime = perfData.loadEventEnd - perfData.fetchStart

          if (loadTime > 0 && process.env.NODE_ENV === 'development') {
            console.log(`Page loaded in ${loadTime.toFixed(2)}ms`)
          }

          if (loadTime > 3000 && typeof window !== 'undefined' && window.gtag) {
            window.gtag('event', 'page_load_time', {
              event_category: 'performance',
              value: Math.round(loadTime)
            })
          }
        }
      }

      if (document.readyState === 'complete') {
        measurePageLoad()
      } else {
        window.addEventListener('load', measurePageLoad)
        return () => window.removeEventListener('load', measurePageLoad)
      }
    }
  }, [])

  return null
}

const NetworkStatus = () => {
  const [isOnline, setIsOnline] = useState(true)
  const [showStatus, setShowStatus] = useState(false)

  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true)
      setShowStatus(true)
      setTimeout(() => setShowStatus(false), 3000)
    }

    const handleOffline = () => {
      setIsOnline(false)
      setShowStatus(true)
    }

    setIsOnline(navigator.onLine)

    window.addEventListener('online', handleOnline)
    window.addEventListener('offline', handleOffline)

    return () => {
      window.removeEventListener('online', handleOnline)
      window.removeEventListener('offline', handleOffline)
    }
  }, [])

  if (!showStatus) return null

  return (
    <div className={`fixed top-20 left-1/2 transform -translate-x-1/2 z-50 px-4 py-2 rounded-full text-white text-sm font-medium transition-all duration-300 ${
      isOnline
        ? 'bg-green-500 animate-in slide-in-from-top'
        : 'bg-red-500'
    }`}>
      <div className="flex items-center space-x-2">
        {isOnline ? <Wifi className="h-4 w-4" /> : <WifiOff className="h-4 w-4" />}
        <span>{isOnline ? 'Back online' : 'No internet connection'}</span>
      </div>
    </div>
  )
}

const LoadingScreen = ({ message = "Loading your experience..." }: { message?: string }) => (
  <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center relative overflow-hidden">
    {}
    <div className="absolute inset-0 opacity-10">
      <div className="absolute w-96 h-96 -top-48 -left-48 bg-blue-400 rounded-full animate-pulse" />
      <div className="absolute w-96 h-96 -bottom-48 -right-48 bg-purple-400 rounded-full animate-pulse" style={{ animationDelay: '1s' }} />
    </div>

    <div className="text-center space-y-6 animate-fade-in relative z-10">
      <div className="relative inline-flex items-center justify-center">
        {}
        <div className="absolute w-24 h-24 rounded-full border-4 border-blue-200 animate-spin" style={{ animationDuration: '3s' }}></div>
        {}
        <Loader2 className="h-16 w-16 text-blue-600 animate-spin" />
        {}
        <div className="absolute w-4 h-4 bg-blue-600 rounded-full animate-pulse"></div>
      </div>

      <div className="space-y-2 max-w-sm">
        <h2 className="text-2xl font-bold text-gray-800">{message}</h2>
        <p className="text-blue-600">Curating the best products for you</p>
      </div>

     {}
<div className="w-64 h-1 bg-gray-200 rounded-full overflow-hidden mx-auto">
  <div className="h-full bg-gradient-to-r from-blue-500 to-purple-500 rounded-full animate-progress" />
</div>

      {}
      <div className="flex justify-center space-x-2">
        {[...Array(3)].map((_, i) => (
          <div
            key={i}
            className="w-3 h-3 bg-blue-400 rounded-full animate-bounce"
            style={{ animationDelay: `${i * 0.1}s` }}
          />
        ))}
      </div>
    </div>
  </div>
)

const ErrorScreen = ({ onRetry }: { error: string; onRetry: () => void }) => (
  <div className="min-h-screen bg-gradient-to-br from-red-50 to-pink-50 flex items-center justify-center p-4">
    <div className="max-w-md w-full bg-white rounded-xl shadow-lg overflow-hidden">
      <div className="p-6 text-center">
        <div className="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-red-100 mb-4">
          <AlertCircle className="h-8 w-8 text-red-600" />
        </div>
        <h3 className="text-lg font-medium text-gray-900 mb-2">
          Connection Issue
        </h3>
        <p className="text-gray-600 mb-6">
          We&apos;re having trouble loading the page. Please check your connection and try again.
        </p>
        <div className="space-y-3">
          <button
            onClick={onRetry}
            className="w-full inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-all duration-150"
          >
            Try Again
          </button>
          <button
            onClick={() => window.location.reload()}
            className="w-full inline-flex items-center justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-150"
          >
            Refresh Page
          </button>
        </div>
      </div>
    </div>
  </div>
)

const visitedProducts = new Set<string>()

function MyApp({ Component, pageProps }: AppProps<ExtendedPageProps>) {
  const router = useRouter()
  const [products, setProducts] = useState<PaginatedResponse<Product>>({ data: [], total: 0 })
  const [vendors, setVendors] = useState<Vendor[]>([])
  const [categories, setCategories] = useState<Category[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [routeChanging, setRouteChanging] = useState(false)
  const isBackNavigation = useRef(false)
  const [retryCount, setRetryCount] = useState(0)

  usePerformanceMonitor()

  useEffect(() => {
    const preloadImages = [
      '/Bhaba_logo.png',
      '/category-images/electronics.jpeg',
      '/category-images/clothing.webp',
      '/category-images/shoes.webp'
    ]

    preloadImages.forEach(src => {
      const link = document.createElement('link')
      link.rel = 'preload'
      link.as = 'image'
      link.href = src
      document.head.appendChild(link)
    })

    const criticalCSS = document.createElement('link')
    criticalCSS.rel = 'preload'
    criticalCSS.as = 'style'
    criticalCSS.href = '/critical.css'
    document.head.appendChild(criticalCSS)
  }, [])

  useEffect(() => {
    const handleRouteChange = (url: string) => {
      if (url.includes('/product/')) {
        visitedProducts.add(url)
      }
    }

    router.events.on('routeChangeComplete', handleRouteChange)
    return () => {
      router.events.off('routeChangeComplete', handleRouteChange)
    }
  }, [router])

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const handlePopState = () => {
        isBackNavigation.current = true
      }
      window.addEventListener('popstate', handlePopState)
      return () => window.removeEventListener('popstate', handlePopState)
    }
  }, [])

  useEffect(() => {
    const handleStart = (url: string) => {
      const isCachedProduct = url.includes('/product/') && visitedProducts.has(url)
      if (isBackNavigation.current && isCachedProduct) {
        isBackNavigation.current = false
        return
      }

      if (url.includes('/product/')) {
        setRouteChanging(true)
      }
    }

    const handleComplete = () => {
      setRouteChanging(false)
      isBackNavigation.current = false
    }

    const handleError = () => {
      setRouteChanging(false)
      setError('Navigation failed. Please try again.')
    }

    router.events.on('routeChangeStart', handleStart)
    router.events.on('routeChangeComplete', handleComplete)
    router.events.on('routeChangeError', handleError)

    return () => {
      router.events.off('routeChangeStart', handleStart)
      router.events.off('routeChangeComplete', handleComplete)
      router.events.off('routeChangeError', handleError)
    }
  }, [router])

  const fetchInitialData = async () => {
    try {
      setLoading(true)
      setError(null)

      const timeoutPromise = new Promise((_, reject) =>
        setTimeout(() => reject(new Error('Request timeout')), 10000)
      )

      const dataPromise = Promise.all([
        fetchAllProducts(),
        fetchVendors(),
        fetchAllCategories()
      ])

      const [productsData, vendorsData, categoriesData] = await Promise.race([
        dataPromise,
        timeoutPromise
      ]) as [PaginatedResponse<Product>, Vendor[], Category[]]

      setProducts(productsData || { data: [], total: 0 })
      setVendors(vendorsData || [])
      setCategories(categoriesData || [])
      setRetryCount(0)
    } catch (err: unknown) {
      console.error('Data fetch error:', err)

      if (retryCount < 3) {
        const backoffDelay = 1000 * Math.pow(2, retryCount)
        setRetryCount(prev => prev + 1)
        setTimeout(fetchInitialData, backoffDelay)
      } else {
        const errorMessage = err instanceof Error ? err.message : 'Failed to load data'
        setError(errorMessage)
      }
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchInitialData()
  }, [])

  useEffect(() => {
    const handleRouteChange = (url: string) => {
      if (typeof window !== 'undefined' && window.gtag) {
        window.gtag('config', 'G-5EXTZ4D9MW', {
          page_path: url,
        })
      }
    }

    router.events.on('routeChangeComplete', handleRouteChange)
    return () => {
      router.events.off('routeChangeComplete', handleRouteChange)
    }
  }, [router])

  useEffect(() => {
    const handleError = (event: ErrorEvent) => {
      if (typeof window !== 'undefined' && window.gtag) {
        window.gtag('event', 'exception', {
          description: event.message,
          fatal: false,
          custom_map: {
            filename: event.filename,
            lineno: event.lineno,
            colno: event.colno
          }
        })
      }
    }

    const handleUnhandledRejection = (event: PromiseRejectionEvent) => {
      if (typeof window !== 'undefined' && window.gtag) {
        window.gtag('event', 'exception', {
          description: String(event.reason),
          fatal: false,
          custom_map: {
            type: 'unhandled_promise_rejection'
          }
        })
      }
    }

    window.addEventListener('error', handleError)
    window.addEventListener('unhandledrejection', handleUnhandledRejection)

    return () => {
      window.removeEventListener('error', handleError)
      window.removeEventListener('unhandledrejection', handleUnhandledRejection)
    }
  }, [])

  const handleRetry = () => {
    setRetryCount(0)
    fetchInitialData()
  }

  if (loading) {
    return <LoadingScreen message="Setting up your marketplace experience..." />
  }

  if (error) {
    return <ErrorScreen error={error} onRetry={handleRetry} />
  }

  const extendedPageProps: ExtendedPageProps = {
    ...pageProps,
    products,
    vendors,
    categories
  }

  return (
    <>
      <Head>
        <meta charSet="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5, user-scalable=yes" />
        <meta name="theme-color" content="#3B82F6" />
        <meta name="description" content="Bhaba Marketplace - Shop online in Tanzania for electronics, clothing, shoes and more at wholesale prices from verified vendors" />
        <meta name="keywords" content="Tanzania shopping, online marketplace, electronics, clothing, wholesale prices, verified vendors, Dar es Salaam" />

        {}
        <link rel="manifest" href="/manifest.json" />
        <link rel="apple-touch-icon" href="/icons/apple-touch-icon.png" />

        {}
        <link rel="dns-prefetch" href="https://ik.imagekit.io" />
        <link rel="dns-prefetch" href="https://bhababackend.onrender.com" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />

        {}
        <meta property="og:type" content="website" />
        <meta property="og:site_name" content="Bhaba Marketplace" />
        <meta property="og:locale" content="en_TZ" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="robots" content="index, follow" />
        <meta name="googlebot" content="index, follow" />

        {}
        <meta name="geo.region" content="TZ" />
        <meta name="geo.country" content="Tanzania" />
        <meta name="geo.placename" content="Dar es Salaam" />

        <link rel="icon" href="/Bhaba_logo.png" />
        <link rel="canonical" href={`https://yourstore.com${router.asPath}`} />
      </Head>

      {}
      <Script
        strategy="afterInteractive"
        src="https://www.googletagmanager.com/gtag/js?id=G-5EXTZ4D9MW"
      />
      <Script
        id="ga4-init"
        strategy="afterInteractive"
        dangerouslySetInnerHTML={{
          __html: `
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', 'G-5EXTZ4D9MW', {
              page_path: window.location.pathname,
              send_page_view: true
            });
          `
        }}
      />

      {}
      {process.env.NODE_ENV === 'development' && <PerformanceMonitor />}

      <div className="min-h-screen bg-gradient-to-b from-gray-50 to-blue-50 pb-16 relative overflow-x-hidden">
        {}
        <NetworkStatus />

        {}
        {routeChanging && (
          <div className="fixed inset-0 bg-white bg-opacity-90 z-50 flex items-center justify-center backdrop-blur-sm">
            <div className="flex flex-col items-center space-y-4">
              <div className="flex space-x-2">
                {[...Array(3)].map((_, i) => (
                  <div
                    key={i}
                    className="w-4 h-4 rounded-full animate-bounce"
                    style={{
                      backgroundColor: ['#3B82F6', '#10B981', '#F59E0B'][i],
                      animationDelay: `${i * 0.1}s`
                    }}
                  />
                ))}
              </div>
              <p className="text-gray-600 font-medium">Loading product details...</p>
            </div>
          </div>
        )}

        {}
        <Suspense fallback={<LoadingScreen />}>
          <ErrorBoundary
            onError={(error, errorInfo) => {
              console.error('App Error Boundary:', error, errorInfo)
              if (typeof window !== 'undefined' && window.gtag) {
                window.gtag('event', 'exception', {
                  description: error.message,
                  fatal: true,
                  custom_map: {
                    component_stack: errorInfo.componentStack
                  }
                })
              }
            }}
          >
            <Component {...extendedPageProps} />
          </ErrorBoundary>
        </Suspense>

        {}
        <AppDownloadBanner />
      </div>
    </>
  )
}

export default MyApp

================================================================================

FILE 21: C:\src\Bhaba_com\bhaba-marketplace\src\pages\account.tsx
================================================================================
import React from 'react'
import Head from 'next/head'
import HeaderBar from '../components/HeaderBar'
import Link from 'next/link'
import { User, Shield, FileText, LogOut } from 'lucide-react'

const Account: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-50">
      <Head>
        <title>Account | Bhaba Marketplace</title>
        <meta name="description" content="Your Bhaba Marketplace account" />
      </Head>

      <HeaderBar
        showBackButton={true}
        showSearch={false}
        showViewToggle={false}
        showSort={false}
        showFilter={false}
        onBack={() => window.history.back()}
      />

      <main className="max-w-2xl mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow-md overflow-hidden">
          {}
          <div className="bg-gradient-to-r from-blue-500 to-purple-600 p-6 text-white">
            <div className="flex items-center space-x-4">
              <div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center">
                <User className="h-8 w-8" />
              </div>
              <div>
                <h1 className="text-xl font-semibold">Welcome!</h1>
                <p className="text-blue-100">Manage your account settings</p>
              </div>
            </div>
          </div>

          {}
          <div className="p-6 space-y-4">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Account Settings</h2>

            {}

            {}
            {}

<Link
  href="/privacy-policy-full"
  className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
>
  <div className="flex items-center space-x-3">
    <Shield className="h-5 w-5 text-purple-600" />
    <span className="text-gray-900">Privacy Policy</span>
  </div>
  <span className="text-gray-400">→</span>
</Link>

<Link
  href="/terms-of-service-full"
  className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
>
  <div className="flex items-center space-x-3">
    <FileText className="h-5 w-5 text-orange-600" />
    <span className="text-gray-900">Terms of Service</span>
  </div>
  <span className="text-gray-400">→</span>
</Link>

            {}
            <button className="w-full flex items-center justify-center space-x-2 p-4 text-red-600 hover:bg-red-50 rounded-lg transition-colors mt-8">
              <LogOut className="h-5 w-5" />
              <span>Sign Out</span>
            </button>
          </div>
        </div>

        {}
        <div className="mt-6 bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Need Help?</h3>
          <div className="space-y-2 text-sm text-gray-600">
            <p>Email: support@bhabalimited.com</p>
            <p>Phone: +255 618 205 278</p>
            <p>Available 24/7 for your inquiries</p>
          </div>
        </div>
      </main>
    </div>
  )
}

export default Account

================================================================================

FILE 22: C:\src\Bhaba_com\bhaba-marketplace\src\pages\category\[category].tsx
================================================================================
import { useRouter } from 'next/router'
import React, { useState, useEffect, useMemo } from 'react'
import Head from 'next/head'
import { Loader2 } from 'lucide-react'
import ProductCard from '../../components/ProductCard'
import HeaderBar from '../../components/HeaderBar'
import { fetchWithRetry, SearchResult } from '../../utils/api'
import type { NextPage } from 'next'
import { Product } from '../../utils/api'
import { slugify } from '../../utils/api'
import { smartShuffle, shuffleArray } from '../../utils/shuffle'

const API_BASE = "https://bhababackend.onrender.com"

interface CategoryPageProps {
  initialProducts: Product[]
}

const CategoryPage: NextPage<CategoryPageProps> = ({ initialProducts = [] }) => {
  const router = useRouter()
  const { category } = router.query
  const [products, setProducts] = useState<Product[]>(initialProducts)
  const [loading, setLoading] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')
  const [sortOption, setSortOption] = useState('relevance')
  const [, setShowFilters] = useState(false)

  useEffect(() => {
    if (category && (!initialProducts || initialProducts.length === 0)) {
      const fetchCategoryProducts = async () => {
        setLoading(true);
        try {
          const categoryName = typeof category === 'string'
            ? category.replace(/-/g, ' ')
            : '';

          const response = await fetchWithRetry<SearchResult>(
            `${API_BASE}/search?category=${encodeURIComponent(categoryName)}`
          );

          setProducts(Array.isArray(response?.hits) ? response.hits : []);
        } catch (error) {
          console.error('Error fetching category products:', error);
          setProducts([]);
        } finally {
          setLoading(false);
        }
      };
      fetchCategoryProducts();
    }
  }, [category, initialProducts]);

  const filteredProducts = useMemo(() => {
    if (!Array.isArray(products)) return []
    if (!searchQuery) return products

    return products.filter(product =>
      (product?.product_name || '').toLowerCase().includes(searchQuery.toLowerCase()) ||
      (product?.description || '').toLowerCase().includes(searchQuery.toLowerCase()) ||
      (product?.vendorName || '').toLowerCase().includes(searchQuery.toLowerCase())
    )
  }, [products, searchQuery])

const sortedProducts = useMemo(() => {
  if (!Array.isArray(filteredProducts)) return []

  const productsToSort = [...filteredProducts]

  switch(sortOption) {
    case 'price-asc':
      productsToSort.sort((a, b) => {
        const priceA = a.discount > 0 ? a.price * (1 - a.discount / 100) : a.price
        const priceB = b.discount > 0 ? b.price * (1 - b.discount / 100) : b.price
        return priceA - priceB
      })
      break
    case 'price-desc':
      productsToSort.sort((a, b) => {
        const priceA = a.discount > 0 ? a.price * (1 - a.discount / 100) : a.price
        const priceB = b.discount > 0 ? b.price * (1 - b.discount / 100) : b.price
        return priceB - priceA
      })
      break
    case 'newest':
      productsToSort.sort((a, b) =>
        new Date(b.added_at).getTime() - new Date(a.added_at).getTime()
      )
      break
    case 'discount':
      productsToSort.sort((a, b) => (b.discount || 0) - (a.discount || 0))
      break
    default:
      break
  }

  if (sortOption === 'relevance' || !sortOption) {
    return smartShuffle(productsToSort, 'vendorId')
  } else {
    return shuffleArray(productsToSort)
  }
}, [filteredProducts, sortOption])

  const handleProductClick = (product: Product) => {
    const slug = `${slugify(product.product_name)}_${product.id}`
    const categorySlug = (product.categoryName || 'uncategorized').toLowerCase().replace(/\s+/g, '-')
    router.push(`/product/${categorySlug}/${slug}`)
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="h-10 w-10 animate-spin text-blue-500 mx-auto mb-3" />
          <p className="text-sm text-gray-600">Loading products...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Head>
        <title>{category} | Bhaba Marketplace</title>
        <meta name="description" content={`Browse ${category} products on Bhaba Marketplace`} />
      </Head>

      <HeaderBar
        showBackButton={true}
        searchQuery={searchQuery}
        setSearchQuery={setSearchQuery}
        viewMode={viewMode}
        setViewMode={setViewMode}
        setShowFilters={setShowFilters}
        sortOption={sortOption}
        setSortOption={setSortOption}
      />

      <main className="max-w-7xl mx-auto px-4 py-6">
        <h1 className="text-2xl font-bold text-gray-900 mb-6 capitalize">
          {category}
        </h1>

        {sortedProducts.length > 0 ? (
          <div className={
  viewMode === 'grid'
    ? "columns-2 sm:columns-3 md:columns-4 lg:columns-5 gap-4 space-y-4"
    : "space-y-4"
}>
            {sortedProducts.map((product) => (
              <ProductCard
                key={product.id}
                product={product}
                viewMode={viewMode}
                onClick={handleProductClick}
              />
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <p className="text-gray-600">
              {searchQuery
                ? `No products found matching "${searchQuery}"`
                : 'No products found in this category'
              }
            </p>
          </div>
        )}
      </main>
    </div>
  )
}

export async function getStaticProps({ params }: { params: { category: string } }) {
  try {
    const categoryName = params.category.replace(/-/g, ' ');

    const response = await fetchWithRetry<SearchResult>(
      `${API_BASE}/search?category=${encodeURIComponent(categoryName)}`
    );

    return {
      props: {
        initialProducts: Array.isArray(response?.hits) ? response.hits : []
      },
      revalidate: 3600
    };
  } catch (error) {
    console.error('Error fetching category products:', error);
    return {
      props: {
        initialProducts: []
      }
    };
  }
}

export async function getStaticPaths() {
  try {
    const categories = await fetchWithRetry<string[]>(
      `${API_BASE}/categories`
    )

    const paths = Array.isArray(categories) ? categories.map((category) => ({
      params: { category: category.toLowerCase().replace(/\s+/g, '-') }
    })) : []

    return {
      paths,
      fallback: 'blocking'
    }
  } catch (error) {
    console.error('Error generating category paths:', error)
    return {
      paths: [],
      fallback: 'blocking'
    }
  }
}

export default CategoryPage

================================================================================

FILE 23: C:\src\Bhaba_com\bhaba-marketplace\src\pages\index.tsx
================================================================================
import React, { useState, useMemo, useEffect, Suspense } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import { AlertCircle, X, ChevronRight, TrendingUp, Star, Users } from 'lucide-react'
import dynamic from 'next/dynamic'
import Image from 'next/image'
import { slugify } from '../utils/api'
import { smartShuffle, shuffleArray } from '../utils/shuffle'

const ProductCard = dynamic(() => import('../components/ProductCard'), {
  loading: () => <ProductCardSkeleton />
})
const FilterModal = dynamic(() => import('../components/FilterModal'))
const AppDownloadBanner = dynamic(() => import('../components/AppDownloadBanner'))

import HeaderBar from '../components/HeaderBar'
import BottomNavigation from '../components/BottomNavigation'
import type { NextPage } from 'next'

interface Product {
  id: string
  productId: string
  product_name: string
  price: number
  description: string
  discount: number
  details: string
  tier_pricing: string[]
  product_images: string[]
  mobile_number: string
  isAvailable: boolean
  moq: number
  added_at: string
  vendorId: string
  vendorName: string
  categoryId: string
  categoryName: string
}

interface Vendor {
  id: string
  store_name: string
  store_logo: string
}

interface HomeProps {
  products: Product[]
  vendors: Vendor[]
  categories: string[]
}

const ProductCardSkeleton = () => (
  <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden animate-pulse">
    <div className="w-full aspect-square bg-gray-200" />
    <div className="p-3 space-y-3">
      <div className="h-4 bg-gray-200 rounded w-3/4" />
      <div className="h-3 bg-gray-200 rounded w-1/2" />
      <div className="h-6 bg-gray-200 rounded w-1/3" />
      <div className="flex gap-2">
        <div className="h-8 bg-gray-200 rounded flex-1" />
        <div className="h-8 bg-gray-200 rounded flex-1" />
      </div>
    </div>
  </div>
)

const CategorySkeleton = () => (
  <div className="flex flex-col items-center justify-center w-20 sm:w-24 h-20 sm:h-24 rounded-lg bg-white border border-gray-200 animate-pulse">
    <div className="w-12 h-12 sm:w-14 sm:h-14 bg-gray-200 rounded-md mb-1" />
    <div className="h-3 bg-gray-200 rounded w-12" />
  </div>
)

const HeroSection = () => (
  <div className="relative bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600 text-white overflow-hidden">
    {}
    <div className="absolute inset-0 opacity-10">
      <div className="absolute inset-0 bg-repeat" style={{
        backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Ccircle cx='30' cy='30' r='4'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`
      }} />
    </div>

    <div className="relative max-w-7xl mx-auto px-4 py-8 sm:py-12">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
        <div className="space-y-6">
          <div className="space-y-4">
            <div className="inline-flex items-center bg-white/20 backdrop-blur-sm rounded-full px-4 py-2 text-sm">
              <TrendingUp className="h-4 w-4 mr-2" />
              <span>Tanzania&apos;s #1 Marketplace</span>
            </div>

            <h1 className="text-3xl sm:text-4xl lg:text-5xl font-bold leading-tight">
              Discover Amazing
              <span className="block bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent">
                Products
              </span>
            </h1>

            <p className="text-lg sm:text-xl text-blue-100 max-w-lg">
              Shop from thousands of verified vendors across Tanzania. Quality products, competitive prices, fast delivery.
            </p>
          </div>

          <div className="grid grid-cols-3 gap-4 py-4">
            <div className="text-center">
              <div className="text-2xl sm:text-3xl font-bold">10K+</div>
              <div className="text-sm text-blue-200">Products</div>
            </div>
            <div className="text-center">
              <div className="text-2xl sm:text-3xl font-bold">500+</div>
              <div className="text-sm text-blue-200">Vendors</div>
            </div>
            <div className="text-center">
              <div className="text-2xl sm:text-3xl font-bold">50K+</div>
              <div className="text-sm text-blue-200">Happy Customers</div>
            </div>
          </div>

          <div className="flex flex-col sm:flex-row gap-4">
  <button className="bg-white text-blue-600 px-6 py-3 rounded-lg font-semibold hover:bg-blue-50 transition-colors flex items-center justify-center">
    Start Shopping
    <ChevronRight className="ml-2 h-4 w-4" />
  </button>

  <a
    href="https://play.google.com/store/apps/details?id=com.vendor.bhaba"
    target="_blank"
    rel="noopener noreferrer"
    className="border-2 border-white/30 text-white px-6 py-3 rounded-lg font-semibold hover:bg-white/10 transition-colors text-center"
  >
    Download App
  </a>
</div>

        </div>

        <div className="relative hidden lg:block">
          <div className="relative w-full h-96">
            <div className="absolute inset-0 bg-gradient-to-r from-transparent to-white/10 rounded-2xl" />
            <div className="grid grid-cols-2 gap-4 h-full">
              <div className="space-y-4">
                <div className="bg-white/20 backdrop-blur-sm rounded-xl p-4 h-32">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-yellow-400 rounded-lg flex items-center justify-center">
                      <Star className="h-4 w-4 text-yellow-800" />
                    </div>
                    <div>
                      <div className="text-sm font-semibold">Quality Products</div>
                      <div className="text-xs text-blue-200">Verified sellers</div>
                    </div>
                  </div>
                </div>
                <div className="bg-white/20 backdrop-blur-sm rounded-xl p-4 h-40">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-green-400 rounded-lg flex items-center justify-center">
                      <Users className="h-4 w-4 text-green-800" />
                    </div>
                    <div>
                      <div className="text-sm font-semibold">Trusted Community</div>
                      <div className="text-xs text-blue-200">50K+ customers</div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="space-y-4 pt-8">
                <div className="bg-white/20 backdrop-blur-sm rounded-xl p-4 h-40">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-purple-400 rounded-lg flex items-center justify-center">
                      <TrendingUp className="h-4 w-4 text-purple-800" />
                    </div>
                    <div>
                      <div className="text-sm font-semibold">Best Prices</div>
                      <div className="text-xs text-blue-200">Competitive rates</div>
                    </div>
                  </div>
                </div>
                <div className="bg-white/20 backdrop-blur-sm rounded-xl p-4 h-32">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-orange-400 rounded-lg flex items-center justify-center">
                      <ChevronRight className="h-4 w-4 text-orange-800" />
                    </div>
                    <div>
                      <div className="text-sm font-semibold">Fast Delivery</div>
                      <div className="text-xs text-blue-200">Quick shipping</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
)

const Home: NextPage<HomeProps> = ({ products = [], vendors = [], categories = [] }) => {
  const router = useRouter()
  const [searchQuery, setSearchQuery] = useState('')
  const [filters, setFilters] = useState({
    categories: [] as string[],
    vendors: [] as string[],
    priceRange: [0, 10000000] as [number, number],
    inStock: false
  })
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')
  const [showFilters, setShowFilters] = useState(false)
  const [sortOption, setSortOption] = useState('relevance')
  const [showWholesale, setShowWholesale] = useState(false)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    const timer = setTimeout(() => setIsLoading(false), 100)
    return () => clearTimeout(timer)
  }, [])

  const categoryImages = {
    Electronics: '/category-images/electronics.jpeg',
    Shoes: '/category-images/shoes.webp',
    Clothing: '/category-images/clothing.webp',
    Automotive: '/category-images/automotive.webp',
    Bags: '/category-images/bags.webp',
    Cars: '/category-images/cars.jpg',
    "Computer & Accessories": '/category-images/computer-accessories.png',
    Furniture: '/category-images/furniture.jpeg',
    "Grains & Pulses": '/category-images/grains_pulses.jpeg',
    "Health & Beauty": '/category-images/health_beauty.jpeg',
    "Home Appliances": '/category-images/home_appliances.jpeg',
    "Home Textile": '/category-images/home_textile.jpeg',
    "Jewelry & Watches": '/category-images/jewelry_watches.jpeg',
    Phone: '/category-images/phone.jpg',
    Smokeables: '/category-images/smokeables.webp',
    "Sports & Outdoors": '/category-images/sports_outdoors.jpeg',
    "Office Supplies": '/category-images/office_supplies.jpeg',
  }

  const wholesaleVendors = ['dPpBnTL3CDN879g7X1cRVoRG5wn2']

const filteredProducts = useMemo(() => {
  let filtered = products

  if (searchQuery) {
    filtered = filtered.filter(product => {
      const searchLower = searchQuery.toLowerCase()
      return (
        (product.product_name || '').toLowerCase().includes(searchLower) ||
        (product.description || '').toLowerCase().includes(searchLower) ||
        (product.vendorName || '').toLowerCase().includes(searchLower) ||
        (product.categoryName || '').toLowerCase().includes(searchLower)
      )
    })
  }

  if (filters.categories.length > 0) {
    filtered = filtered.filter(product =>
      filters.categories.includes(product.categoryName)
    )
  }

  if (filters.vendors.length > 0) {
    filtered = filtered.filter(product =>
      filters.vendors.includes(product.vendorId)
    )
  }

  filtered = filtered.filter(product => {
    const price = product.discount > 0
      ? product.price * (1 - product.discount / 100)
      : product.price
    return price >= filters.priceRange[0] && price <= filters.priceRange[1]
  })

  if (filters.inStock) {
    filtered = filtered.filter(product => product.isAvailable)
  }

  switch(sortOption) {
    case 'price-asc':
      filtered.sort((a, b) => {
        const priceA = a.discount > 0 ? a.price * (1 - a.discount / 100) : a.price
        const priceB = b.discount > 0 ? b.price * (1 - b.discount / 100) : b.price
        return priceA - priceB
      })
      break
    case 'price-desc':
      filtered.sort((a, b) => {
        const priceA = a.discount > 0 ? a.price * (1 - a.discount / 100) : a.price
        const priceB = b.discount > 0 ? b.price * (1 - b.discount / 100) : b.price
        return priceB - priceA
      })
      break
    case 'newest':
      filtered.sort((a, b) => new Date(b.added_at).getTime() - new Date(a.added_at).getTime())
      break
    case 'discount':
      filtered.sort((a, b) => b.discount - a.discount)
      break
    default:
      break
  }

  if (sortOption === 'relevance' || !sortOption) {
    return smartShuffle(filtered, 'categoryName')
  } else {
    return shuffleArray(filtered)
  }
}, [products, searchQuery, filters, sortOption])

  const handleProductClick = (product: Product) => {
    const slug = `${slugify(product.product_name)}_${product.id}`
    const categorySlug = product.categoryName.toLowerCase().replace(/\s+/g, '-')
    router.push(`/product/${categorySlug}/${slug}`)
  }

  const handleWholesaleClick = () => {
    setShowWholesale(true)
    setFilters({
      ...filters,
      vendors: wholesaleVendors
    })
  }

  return (
    <div className="min-h-screen bg-gray-50 w-full overflow-x-hidden">
      <Head>
        <title>Bhaba Marketplace - Shop Online in Tanzania</title>
        <meta name="description" content="Discover the best products at affordable prices in Tanzania. Shop electronics, clothing, shoes and more from verified vendors." />
        <meta name="keywords" content="Tanzania ecommerce, online shopping, Bhaba Marketplace, electronics, clothing, shoes" />
        <meta property="og:title" content="Bhaba Marketplace - Shop Online in Tanzania" />
        <meta property="og:description" content="Discover the best products at affordable prices in Tanzania." />
        <meta property="og:type" content="website" />
        <link rel="preload" href="/Bhaba_logo.png" as="image" />
        <link rel="dns-prefetch" href="https://ik.imagekit.io" />
      </Head>

      <HeaderBar
        searchQuery={searchQuery}
        setSearchQuery={setSearchQuery}
        viewMode={viewMode}
        setViewMode={setViewMode}
        setShowFilters={setShowFilters}
        sortOption={sortOption}
        setSortOption={setSortOption}
      />

      {}
      <HeroSection />

      <main className="max-w-7xl mx-auto px-3 sm:px-4 md:px-6 lg:px-8 py-6 md:py-8">
        {showWholesale && (
          <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg flex items-center justify-between">
            <div>
              <h2 className="text-lg font-semibold text-blue-900">
                Wholesale Products
              </h2>
              <p className="text-sm text-blue-700">Special bulk pricing available</p>
            </div>
            <button
              onClick={() => {
                setShowWholesale(false)
                setFilters({ ...filters, vendors: [] })
              }}
              className="text-blue-600 hover:text-blue-800 font-medium text-sm"
            >
              Show All Products
            </button>
          </div>
        )}

        {}
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 gap-4">
          <div>
            <h2 className="text-xl md:text-2xl font-bold text-gray-900">
              {searchQuery ? `Search results for "${searchQuery}"` : 'Featured Products'}
            </h2>
            <p className="text-sm text-gray-600 mt-1">
              {filteredProducts.length} product{filteredProducts.length !== 1 ? 's' : ''} available
            </p>
          </div>

          {(filters.categories.length > 0 || filters.vendors.length > 0 || filters.inStock) && (
            <div className="flex flex-wrap items-center gap-2">
              <span className="text-sm text-gray-600">Filters:</span>
              {filters.categories.map(categoryName => (
                <span key={categoryName} className="inline-flex items-center gap-1 bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
                  {categoryName}
                  <button
                    onClick={() => {
                      setFilters({
                        ...filters,
                        categories: filters.categories.filter(name => name !== categoryName)
                      })
                    }}
                    className="hover:text-blue-600 ml-1"
                  >
                    <X className="h-3 w-3" />
                  </button>
                </span>
              ))}
            </div>
          )}
        </div>

        {}
        <div className="mb-8">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Shop by Category</h3>
          <div className="overflow-x-auto">
            <div className="flex gap-4 pb-4 min-w-max">
              {isLoading ? (
                Array.from({ length: 8 }, (_, i) => <CategorySkeleton key={i} />)
              ) : (
                categories.map((categoryName) => (
                  <button
                    key={categoryName}
                    onClick={() => {
                      router.push(`/category/${categoryName.toLowerCase().replace(/\s+/g, '-')}`)
                    }}
                    className="flex flex-col items-center justify-center w-20 sm:w-24 h-20 sm:h-24 rounded-xl bg-white border border-gray-200 hover:border-blue-300 hover:shadow-md transition-all duration-200 flex-shrink-0 group"
                  >
                    {categoryImages[categoryName as keyof typeof categoryImages] && (
                      <div className="relative w-10 h-10 sm:w-12 sm:h-12 mb-2 overflow-hidden rounded-lg group-hover:scale-110 transition-transform duration-200">
                        <Image
                          src={categoryImages[categoryName as keyof typeof categoryImages]}
                          alt={categoryName}
                          fill
                          className="object-cover"
                          loading="lazy"
                          sizes="48px"
                        />
                      </div>
                    )}
                    <span className="text-xs font-medium text-gray-700 text-center px-1 leading-tight">
                      {categoryName.split(' ')[0]}
                    </span>
                  </button>
                ))
              )}
            </div>
          </div>
        </div>

        {}
        {isLoading ? (
         <div className="columns-2 sm:columns-3 md:columns-4 lg:columns-5 xl:columns-6 gap-4 space-y-4">
            {Array.from({ length: 12 }, (_, i) => (
              <ProductCardSkeleton key={i} />
            ))}
          </div>
        ) : filteredProducts.length === 0 ? (
          <div className="text-center py-16">
            <AlertCircle className="h-16 w-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-gray-900 mb-2">No products found</h3>
            <p className="text-gray-600 mb-6">Try adjusting your search or filters</p>
            <button
              onClick={() => {
                setSearchQuery('')
                setFilters({
                  categories: [],
                  vendors: [],
                  priceRange: [0, 10000000],
                  inStock: false
                })
              }}
              className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
            >
              Clear Filters
            </button>
          </div>
        ) : (
          <Suspense fallback={<div>Loading products...</div>}>
           <div className="columns-2 sm:columns-3 md:columns-4 lg:columns-5 xl:columns-6 gap-4 space-y-4">
              {filteredProducts.map((product) => (
                <ProductCard
                  key={product.id}
                  product={product}
                  onClick={handleProductClick}
                  viewMode="grid"
                />
              ))}
            </div>
          </Suspense>
        )}
      </main>

      <BottomNavigation onWholesaleClick={handleWholesaleClick} />
      <AppDownloadBanner position="floating" />

      <Suspense fallback={null}>
        <FilterModal
          isOpen={showFilters}
          onClose={() => setShowFilters(false)}
          categories={categories.map(name => ({ id: name, category_name: name }))}
          vendors={vendors}
          filters={filters}
          onFiltersChange={setFilters}
        />
      </Suspense>
    </div>
  )
}

export async function getStaticProps() {
  const apiBase = "https://bhababackend.onrender.com"

  try {
    const [featuredProductsRes, vendorsRes, categoriesRes] = await Promise.all([
      fetch(`${apiBase}/search?limit=100`, {
        headers: { 'Cache-Control': 'no-cache' }
      }),
      fetch(`${apiBase}/vendors`, {
        headers: { 'Cache-Control': 'no-cache' }
      }),
      fetch(`${apiBase}/categories`, {
        headers: { 'Cache-Control': 'no-cache' }
      })
    ])

    const parseResponse = async (res: Response) => {
      if (!res.ok) return []
      const text = await res.text()
      try {
        return text ? JSON.parse(text) : []
      } catch (e) {
        console.error('Failed to parse response:', e)
        return []
      }
    }

    const [products, vendors, categories] = await Promise.all([
      parseResponse(featuredProductsRes),
      parseResponse(vendorsRes),
      parseResponse(categoriesRes)
    ])

    return {
      props: {
        products: Array.isArray(products?.hits) ? products.hits : Array.isArray(products) ? products : [],
        vendors: Array.isArray(vendors) ? vendors : [],
        categories: Array.isArray(categories) ? categories : [],
      },
      revalidate: 1800,
    }
  } catch (error) {
    console.error('Error fetching data:', error)
    return {
      props: {
        products: [],
        vendors: [],
        categories: []
      },
      revalidate: 300,
    }
  }
}

export default Home

================================================================================

FILE 24: C:\src\Bhaba_com\bhaba-marketplace\src\pages\privacy-policy-full.tsx
================================================================================
import React from 'react'
import Head from 'next/head'
import HeaderBar from '../components/HeaderBar'
import { Shield } from 'lucide-react'

const PrivacyPolicyFull: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-50">
      <Head>
        <title>Complete Privacy Policy | Bhaba Marketplace</title>
        <meta name="description" content="Complete Privacy Policy for Bhaba Marketplace" />
      </Head>

      <HeaderBar
        showBackButton={true}
        showSearch={false}
        showViewToggle={false}
        showSort={false}
        showFilter={false}
        onBack={() => window.history.back()}
      />

      <main className="max-w-4xl mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center space-x-3">
              <Shield className="h-8 w-8 text-blue-600" />
              <h1 className="text-3xl font-bold text-gray-900">Complete Privacy Policy</h1>
            </div>
            {}
          </div>

          <div className="prose prose-lg max-w-none">
            <div className="bg-blue-50 p-4 rounded-md mb-6">
              <p className="text-blue-800">
                <strong>Last Updated:</strong> January 15, 2024<br />
                <strong>Effective Date:</strong> January 15, 2024
              </p>
            </div>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">1. Introduction</h2>
              <p className="text-gray-700 mb-4">
                Welcome to Bhaba Marketplace (&quot;we,&quot; &quot;our,&quot; or &quot;us&quot;). We are committed to protecting your
                personal information and your right to privacy. This Privacy Policy explains how we collect,
                use, disclose, and safeguard your information when you use our marketplace platform.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">2. Information We Collect</h2>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">2.1 Personal Information</h3>
              <ul className="list-disc list-inside text-gray-700 mb-4 space-y-2">
                <li>Contact Information (name, email, phone number)</li>
                <li>Account Credentials (username, password)</li>
                <li>Payment Information (credit card details, billing address)</li>
                <li>Demographic Information (age, gender, location)</li>
                <li>Communication Preferences</li>
              </ul>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">2.2 Usage Data</h3>
              <ul className="list-disc list-inside text-gray-700 mb-4 space-y-2">
                <li>IP Address and device information</li>
                <li>Browser type and version</li>
                <li>Pages visited and time spent</li>
                <li>Clickstream data and navigation patterns</li>
                <li>Transaction history and purchase behavior</li>
              </ul>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">3. How We Use Your Information</h2>
              <ul className="list-disc list-inside text-gray-700 mb-4 space-y-2">
                <li>To provide and maintain our services</li>
                <li>To process transactions and send order confirmations</li>
                <li>To communicate with you about products, services, and promotions</li>
                <li>To personalize your experience and provide content recommendations</li>
                <li>To improve our website and services</li>
                <li>To prevent fraud and enhance security</li>
                <li>To comply with legal obligations</li>
              </ul>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">4. Data Sharing and Disclosure</h2>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">4.1 Service Providers</h3>
              <p className="text-gray-700 mb-4">
                We may share your information with third-party service providers who perform services on our behalf,
                including payment processing, data analysis, email delivery, hosting services, and customer service.
              </p>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">4.2 Business Transfers</h3>
              <p className="text-gray-700 mb-4">
                In connection with any merger, sale of company assets, financing, or acquisition of all or a portion
                of our business to another company, we may transfer your information.
              </p>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">4.3 Legal Requirements</h3>
              <p className="text-gray-700 mb-4">
                We may disclose your information where required to do so by law or in response to valid requests
                by public authorities.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">5. Data Retention</h2>
              <p className="text-gray-700 mb-4">
                We will retain your personal information only for as long as is necessary for the purposes set out
                in this Privacy Policy. We will retain and use your information to the extent necessary to comply
                with our legal obligations, resolve disputes, and enforce our policies.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">6. Your Rights</h2>
              <ul className="list-disc list-inside text-gray-700 mb-4 space-y-2">
                <li><strong>Access:</strong> You can request copies of your personal data</li>
                <li><strong>Rectification:</strong> You can request correction of inaccurate data</li>
                <li><strong>Erasure:</strong> You can request deletion of your personal data</li>
                <li><strong>Restriction:</strong> You can request processing restriction</li>
                <li><strong>Data Portability:</strong> You can request transfer of your data</li>
                <li><strong>Objection:</strong> You can object to our processing of your data</li>
              </ul>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">7. Security Measures</h2>
              <p className="text-gray-700 mb-4">
                We implement appropriate security measures to protect your personal information against
                unauthorized access, alteration, disclosure, or destruction. These include:
              </p>
              <ul className="list-disc list-inside text-gray-700 mb-4 space-y-2">
                <li>SSL encryption for data transmission</li>
                <li>Regular security assessments and audits</li>
                <li>Access controls and authentication mechanisms</li>
                <li>Data encryption at rest and in transit</li>
                <li>Regular security training for employees</li>
              </ul>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">8. International Data Transfers</h2>
              <p className="text-gray-700 mb-4">
                Your information may be transferred to and processed in countries other than the country in
                which you reside. These countries may have data protection laws that are different from the
                laws of your country.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">9. Children&apos;s Privacy</h2>
              <p className="text-gray-700 mb-4">
                Our service is not intended for use by children under the age of 18. We do not knowingly
                collect personal information from children under 18. If you become aware that a child has
                provided us with personal information, please contact us.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">10. Changes to This Policy</h2>
              <p className="text-gray-700 mb-4">
                We may update our Privacy Policy from time to time. We will notify you of any changes by
                posting the new Privacy Policy on this page and updating the &quot;Last Updated&quot; date.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">11. Contact Information</h2>
              <div className="bg-gray-50 p-4 rounded-md">
                <p className="text-gray-700 mb-2">
                  <strong>Bhaba Limited</strong><br />
                  P.O. Box 12345<br />
                  Dar es Salaam, Tanzania
                </p>
                <p className="text-gray-700 mb-2">
                  <strong>Email:</strong> privacy@bhabalimited.com<br />
                  <strong>Phone:</strong> +255 618 205 278
                </p>
                <p className="text-gray-700">
                  <strong>Data Protection Officer:</strong> dpo@bhabalimited.com
                </p>
              </div>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">12. Governing Law</h2>
              <p className="text-gray-700 mb-4">
                This Privacy Policy shall be governed by and construed in accordance with the laws of
                the United Republic of Tanzania, without regard to its conflict of law provisions.
              </p>
            </section>
          </div>
        </div>

        {}
      </main>
    </div>
  )
}

export default PrivacyPolicyFull

================================================================================

FILE 25: C:\src\Bhaba_com\bhaba-marketplace\src\pages\privacy-policy.tsx
================================================================================
import React from 'react'
import Head from 'next/head'
import HeaderBar from '../components/HeaderBar'
import Link from 'next/link'

const PrivacyPolicy: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-50">
      <Head>
        <title>Privacy Policy | Bhaba Marketplace</title>
        <meta name="description" content="Bhaba Marketplace Privacy Policy" />
      </Head>

      <HeaderBar
        showBackButton={true}
        showSearch={false}
        showViewToggle={false}
        showSort={false}
        showFilter={false}
        onBack={() => window.history.back()}
      />

      <main className="max-w-4xl mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-6">Privacy Policy</h1>

          <div className="prose prose-lg max-w-none">
            <p className="text-gray-600 mb-6">
              Last updated: {new Date().toLocaleDateString()}
            </p>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">1. Information We Collect</h2>
              <p className="text-gray-700 mb-4">
                We collect information that you provide directly to us, including when you:
              </p>
              <ul className="list-disc list-inside text-gray-700 mb-4 space-y-2">
                <li>Create an account</li>
                <li>Make a purchase</li>
                <li>Contact customer support</li>
                <li>Participate in promotions</li>
              </ul>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">2. How We Use Your Information</h2>
              <p className="text-gray-700 mb-4">
                We use the information we collect to:
              </p>
              <ul className="list-disc list-inside text-gray-700 mb-4 space-y-2">
                <li>Provide and maintain our services</li>
                <li>Process transactions</li>
                <li>Send you technical notices and support messages</li>
                <li>Respond to your comments and questions</li>
              </ul>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">3. Data Security</h2>
              <p className="text-gray-700">
                We implement appropriate security measures to protect your personal information
                against unauthorized access, alteration, disclosure, or destruction.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">4. Your Rights</h2>
              <p className="text-gray-700 mb-4">
                You have the right to:
              </p>
              <ul className="list-disc list-inside text-gray-700 mb-4 space-y-2">
                <li>Access your personal information</li>
                <li>Correct inaccurate data</li>
                <li>Request deletion of your data</li>
                <li>Object to processing of your data</li>
              </ul>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">5. Contact Us</h2>
              <p className="text-gray-700">
                If you have any questions about this Privacy Policy, please contact us at:
              </p>
              <p className="text-blue-600 mt-2">
                Email: privacy@bhabalimited.com<br />
                Phone: +255 618 205 278
              </p>
            </section>

            {}
<div className="border-t pt-6 mt-6">
  <p className="text-sm text-gray-500 mb-4">
    For the complete and most updated version of our Privacy Policy, please visit our full policy page:
  </p>
  <Link
    href="/privacy-policy-full"
    className="inline-flex items-center text-blue-600 hover:text-blue-800 font-semibold"
  >
    View Complete Privacy Policy →
  </Link>
</div>
          </div>
        </div>
      </main>
    </div>
  )
}

export default PrivacyPolicy

================================================================================

FILE 26: C:\src\Bhaba_com\bhaba-marketplace\src\pages\product\[category]\[slug].tsx
================================================================================
import { useRouter } from 'next/router'
import React, { useState, useMemo, useEffect } from 'react'
import Head from 'next/head'
import { ChevronLeft, ChevronRight, Phone, MessageCircle, X, Loader2 } from 'lucide-react'
import Image from 'next/image'
import ProductCard from '../../../components/ProductCard'
import HeaderBar from '../../../components/HeaderBar'
import FilterModal from '../../../components/FilterModal'
import { formatCurrency } from '../../../utils/formatCurrency'
import type { NextPage } from 'next'
import { slugify } from '@/utils/api'
import { fetchWithRetry } from '../../../utils/api'
import Link from 'next/link'
import { smartShuffle } from '../../../utils/shuffle'

interface Product {
  id: string
  productId: string
  product_name: string
  price: number
  description: string
  discount: number
  details: string
  tier_pricing: string[]
  product_images: string[]
  mobile_number: string
  isAvailable: boolean
  moq: number
  added_at: string
  vendorId: string
  vendorName: string
  categoryId: string
  categoryName: string
}

interface Vendor {
  id: string
  store_name: string
  store_logo: string
}

interface ProductDetailProps {
  products: Product[]
  vendors: Vendor[]
  categories: string[]
}

const ProductDetail: NextPage<ProductDetailProps> = ({ products: initialProducts, vendors, categories }) => {
  const router = useRouter()
  const { slug } = router.query
  const [currentImageIndex, setCurrentImageIndex] = useState(0)
  const [products, setProducts] = useState<Product[]>(initialProducts)
  const [loading, setLoading] = useState(false)

  const productId = typeof slug === 'string' ? slug.split('_').pop() : ''
  const product = products.find(p => p.id.toString() === productId)

  const [searchQuery, setSearchQuery] = useState('')
  const [filters, setFilters] = useState({
    categories: [] as string[],
    vendors: [] as string[],
    priceRange: [0, 10000000] as [number, number],
    inStock: false
  })
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')
  const [showFilters, setShowFilters] = useState(false)
  const [sortOption, setSortOption] = useState('relevance')
  const [expandedDescription, setExpandedDescription] = useState(false);

  useEffect(() => {
     const apiBase = "https://bhababackend.onrender.com";
    if (!product && productId) {
      const fetchProduct = async () => {
        setLoading(true)
        try {
          const response = await fetch(`${apiBase}/products/${productId}`)
          const data = await response.json()
          setProducts(prev => [...prev, data])
        } catch (error) {
          console.error('Error fetching product:', error)
        } finally {
          setLoading(false)
        }
      }
      fetchProduct()
    }
  }, [product, productId])

  const filteredProducts = useMemo(() => {
    let filtered = products.filter(p => p.id.toString() !== productId)

    if (searchQuery) {
      const searchLower = searchQuery.toLowerCase()
      filtered = filtered.filter(p =>
        (p.product_name || '').toLowerCase().includes(searchLower) ||
        (p.description || '').toLowerCase().includes(searchLower) ||
        (p.vendorName || '').toLowerCase().includes(searchLower)
      )
    }

    if (filters.categories.length > 0) {
      filtered = filtered.filter(p =>
        filters.categories.includes(p.categoryName)
      )
    }

    if (filters.vendors.length > 0) {
      filtered = filtered.filter(p =>
        filters.vendors.includes(p.vendorId)
      )
    }

    filtered = filtered.filter(p => {
      const price = p.discount > 0
        ? p.price * (1 - p.discount / 100)
        : p.price
      return price >= filters.priceRange[0] && price <= filters.priceRange[1]
    })

    if (filters.inStock) {
      filtered = filtered.filter(p => p.isAvailable)
    }

    switch(sortOption) {
      case 'price-asc':
        filtered.sort((a, b) => {
          const priceA = a.discount > 0 ? a.price * (1 - a.discount / 100) : a.price
          const priceB = b.discount > 0 ? b.price * (1 - b.discount / 100) : b.price
          return priceA - priceB
        })
        break
      case 'price-desc':
        filtered.sort((a, b) => {
          const priceA = a.discount > 0 ? a.price * (1 - a.discount / 100) : a.price
          const priceB = b.discount > 0 ? b.price * (1 - b.discount / 100) : b.price
          return priceB - priceA
        })
        break
      case 'newest':
        filtered.sort((a, b) => new Date(b.added_at).getTime() - new Date(a.added_at).getTime())
        break
      case 'discount':
        filtered.sort((a, b) => b.discount - a.discount)
        break
      default:
        break
    }

    return filtered
  }, [products, productId, searchQuery, filters, sortOption])

const relatedProducts = useMemo(() => {
  if (!product) return []

  const related = filteredProducts.filter(p =>
    p.categoryId === product.categoryId
  ).slice(0, 120)

  return smartShuffle(related, 'vendorId')
}, [filteredProducts, product])

const otherProducts = useMemo(() => {
  if (!product) return []

  const others = filteredProducts.filter(p =>
    p.categoryId !== product.categoryId
  ).slice(0, 120)

  return smartShuffle(others, 'categoryName')
}, [filteredProducts, product])

  const handleBack = () => {
    router.back()
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="h-10 w-10 animate-spin text-blue-500 mx-auto mb-3" />
          <p className="text-sm text-gray-600">Loading product details...</p>
        </div>
      </div>
    )
  }

  if (!product) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <X className="h-10 w-10 text-red-500 mx-auto mb-3" />
          <h2 className="text-lg font-semibold text-gray-900 mb-1">Product not found</h2>
          <button
            onClick={() => router.back()}
            className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors"
          >
            Go Back
          </button>
        </div>
      </div>
    )
  }

  const discountedPrice = product.discount > 0
    ? product.price * (1 - product.discount / 100)
    : product.price

  const handleContactVendor = (e: React.MouseEvent, type: 'whatsapp' | 'call') => {
  e.preventDefault()
  e.stopPropagation()

  const hardcodedNumber = '0618205278';

  const productImage = product.product_images?.[0] || ''
  const originalPrice = formatCurrency(product.price)
  const finalPrice = formatCurrency(discountedPrice)
  const discountText = product.discount > 0 ? ` (${product.discount}% OFF)` : ''

  let message = `Hi, I'm interested in your product:\n\n`
  message += `*Product Name:* ${product.product_name}\n`
  message += `*Price:* ${finalPrice}${discountText}\n`
  if (product.discount > 0) {
    message += `*Original Price:* ${originalPrice}\n`
  }
  message += `*Category:* ${product.categoryName}\n`
  if (product.description) {
    message += `\n*Description:* ${product.description}\n`
  }
  message += `\nPlease let me know more about this product.`

  try {
    if (type === 'whatsapp') {
      if (productImage) {
        message += `\n\n*Product Image:* ${productImage}`
      }

      let cleanNumber = hardcodedNumber.replace(/[^\d+]/g, '')

      if (cleanNumber.startsWith('+255')) {
        cleanNumber = cleanNumber.substring(1)
      } else if (cleanNumber.startsWith('255')) {
      } else if (cleanNumber.startsWith('0')) {
        cleanNumber = '255' + cleanNumber.substring(1)
      } else {
        cleanNumber = '255' + cleanNumber
      }

      const whatsappUrl = `https://wa.me/${cleanNumber}?text=${encodeURIComponent(message)}`
      window.open(whatsappUrl, '_blank')

    } else if (type === 'call') {
      const callUrl = `tel:${hardcodedNumber}`
      window.location.href = callUrl
    }
  } catch (error) {
    console.error('Error handling contact:', error)
    alert('Unable to open contact method. Please try again.')
  }
}

  const nextImage = () => {
    setCurrentImageIndex((prev) =>
      prev === product.product_images.length - 1 ? 0 : prev + 1
    )
  }

  const prevImage = () => {
    setCurrentImageIndex((prev) =>
      prev === 0 ? product.product_images.length - 1 : prev - 1
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Head>
        <title>{product.product_name} | Bhaba Marketplace</title>
        <meta name="description" content={product.description || `Buy ${product.product_name} at ${formatCurrency(discountedPrice)} in Tanzania`} />
        <meta name="keywords" content={`${product.product_name}, ${product.categoryName}, Tanzania, buy online`} />
        <meta property="og:title" content={`${product.product_name} | Bhaba Marketplace`} />
        <meta property="og:description" content={product.description || `Buy ${product.product_name} at ${formatCurrency(discountedPrice)}`} />
        <meta property="og:type" content="product" />
        <meta property="og:url" content={`https://yourstore.com/product/${slug}`} />
        {product.product_images.length > 0 && (
          <meta property="og:image" content={product.product_images[0]} />
        )}
      </Head>

      <HeaderBar
        searchQuery={searchQuery}
        setSearchQuery={setSearchQuery}
        viewMode={viewMode}
        setViewMode={setViewMode}
        setShowFilters={setShowFilters}
        sortOption={sortOption}
        setSortOption={setSortOption}
        showBackButton={true}
        onBack={handleBack}
      />

      {}
      {}

       <div className="p-4 sm:p-6 w-full mx-auto">
         <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 md:gap-8 mb-8 w-full">
           {}
           <div className="space-y-3 sm:space-y-4 w-full">
             <div className="relative w-full aspect-square">
               <Image
                 src={product.product_images?.[currentImageIndex] || '/category-images/placeholder-image.jpg'}
                 alt={product.product_name}
                 fill
                 className="w-full h-full object-contain rounded-lg bg-white"
                 priority={true}
                 quality={90}
               />

               {product.product_images && product.product_images.length > 1 && (
                 <>
                   <button
                     onClick={prevImage}
                     className="absolute left-2 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-70 transition-all"
                   >
                     <ChevronLeft className="h-5 w-5" />
                   </button>
                   <button
                     onClick={nextImage}
                     className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-70 transition-all"
                   >
                     <ChevronRight className="h-5 w-5" />
                   </button>
                 </>
               )}
             </div>

             {product.product_images && product.product_images.length > 1 && (
               <div className="flex gap-2 overflow-x-auto pb-2">
                 {product.product_images.map((image, index) => (
                   <button
                     key={index}
                     onClick={() => setCurrentImageIndex(index)}
                     className={`flex-shrink-0 w-16 h-16 rounded-md overflow-hidden border-2 ${
                       index === currentImageIndex ? 'border-blue-500' : 'border-gray-200'
                     }`}
                   >

       <Image
        src={image || '/category-images/placeholder-image.jpeg'}
         alt={product.product_name}
         width={800}
         height={800}
         className="w-full h-full object-contain rounded-lg bg-white"
         priority={true}
         quality={75}
         placeholder="blur"
         blurDataURL="/category-images/placeholder-image.jpeg"
         onError={(e) => {
           (e.target as HTMLImageElement).src = '/category-images/placeholder-image.jpeg';
         }}
       />

                   </button>
                 ))}
               </div>
             )}
           </div>

           {}
           <div className="space-y-4 sm:space-y-6 w-full">
             <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">
               {product.product_name}
             </h1>

             <div>
               <div className="flex flex-wrap items-center gap-2 mb-2">
                 <span className="text-xs sm:text-sm text-blue-600 bg-blue-50 px-2 py-1 rounded-md">
                   {product.categoryName}
                 </span>
                 {!product.isAvailable && (
                   <span className="text-xs sm:text-sm text-red-600 bg-red-50 px-2 py-1 rounded-md">
                     Out of Stock
                   </span>
                 )}
               </div>

               <div className="flex flex-wrap items-center gap-2 sm:gap-4 mb-3 sm:mb-4">
                 <div>
                   <span className="text-xl sm:text-2xl md:text-3xl font-bold text-blue-600">
                     {formatCurrency(discountedPrice)}
                   </span>
                   {product.discount > 0 && (
                     <span className="text-sm sm:text-lg text-gray-500 line-through ml-2">
                       {formatCurrency(product.price)}
                     </span>
                   )}
                 </div>
                 {product.discount > 0 && (
                   <span className="bg-red-500 text-white px-2 py-1 rounded-md text-xs sm:text-sm font-semibold">
                     -{product.discount}% OFF
                   </span>
                 )}
               </div>
             </div>

             {}

             {}
<div className="space-y-4">
  <div>
    <h3 className="font-semibold text-gray-900 mb-1 sm:mb-2">Description</h3>
    <div className="relative">
      <p
        className={`text-gray-700 text-sm sm:text-base leading-relaxed whitespace-pre-line ${
          !expandedDescription && product.description && product.description.length > 200
            ? 'line-clamp-4'
            : ''
        }`}
      >
        {product.description || 'No description available'}
      </p>
      {product.description && product.description.length > 200 && (
        <button
          onClick={() => setExpandedDescription(!expandedDescription)}
          className="text-blue-500 hover:text-blue-700 text-sm font-medium mt-1 focus:outline-none"
        >
          {expandedDescription ? 'Show Less' : 'Read More'}
        </button>
      )}
    </div>
  </div>

  {product.details && (
    <div>
      <h3 className="font-semibold text-gray-900 mb-1 sm:mb-2">Details</h3>
      <p className="text-gray-700 text-sm sm:text-base">{product.details}</p>
    </div>
  )}

  <div>
    <h3 className="font-semibold text-gray-900 mb-1 sm:mb-2">Vendor</h3>
    <p className="text-gray-700 text-sm sm:text-base">{product.vendorName}</p>
    <p className="text-gray-600 text-sm sm:text-base">
      Contact: {"0618205278"}
    </p>
  </div>

  {product.moq > 0 && (
    <div>
      <h3 className="font-semibold text-gray-900 mb-1 sm:mb-2">
        Minimum Order Quantity
      </h3>
      <p className="text-gray-700 text-sm sm:text-base">
        {product.moq} units
      </p>
    </div>
  )}
</div>

             {}
             <div className="flex flex-col sm:flex-row gap-2 sm:gap-4 pt-2 sm:pt-4">
               <button
                 onClick={(e) => handleContactVendor(e, 'whatsapp')}
                 className="flex-1 bg-green-500 text-white py-3 px-6 rounded-md hover:bg-green-600 transition-colors flex items-center justify-center gap-2 text-sm sm:text-base font-semibold"
                 type="button"
               >
                 <MessageCircle className="h-5 w-5" />
                 WhatsApp
               </button>
               <button
                 onClick={(e) => handleContactVendor(e, 'call')}
                 className="flex-1 bg-blue-500 text-white py-3 px-6 rounded-md hover:bg-blue-600 transition-colors flex items-center justify-center gap-2 text-sm sm:text-base font-semibold"
                 type="button"
               >
                 <Phone className="h-5 w-5" />
                 Call
               </button>
             </div>
           </div>
         </div>

         {}
         {relatedProducts.length > 0 && (
           <div className="mt-8 border-t pt-8 w-full">
             <h3 className="text-lg sm:text-xl font-bold text-gray-900 mb-4 sm:mb-6">
               Related Products
             </h3>
            {}
             <div className="columns-2 sm:columns-3 md:columns-4 lg:columns-5 gap-4 space-y-4">
               {relatedProducts.map((relatedProduct) => (
                 <ProductCard
                   key={relatedProduct.id}
                   product={relatedProduct}
                   viewMode="grid"
                 />
               ))}
             </div>
           </div>
         )}

         {}
         {otherProducts.length > 0 && (
           <div className="mt-8 border-t pt-8 w-full">
             <h3 className="text-lg sm:text-xl font-bold text-gray-900 mb-4 sm:mb-6">
               You Might Also Like
             </h3>
             {}
           <div className="columns-2 sm:columns-3 md:columns-4 lg:columns-5 gap-4 space-y-4">
               {otherProducts.map((otherProduct) => (
               <ProductCard
                   key={otherProduct.id}
                   product={otherProduct}
                   viewMode="grid"
                 />
               ))}
             </div>
           </div>
         )}

         {}
      <div className="mt-12 border-t pt-8">
        <div className="flex flex-wrap justify-center gap-6 text-sm text-gray-600">
          <Link href="/privacy-policy" className="hover:text-blue-600 transition-colors">
            Privacy Policy
          </Link>
          <Link href="/terms-of-service" className="hover:text-blue-600 transition-colors">
            Terms of Service
          </Link>
          {}
        </div>
      </div>
    </div>

             <FilterModal
               isOpen={showFilters}
               onClose={() => setShowFilters(false)}
               categories={categories.map(name => ({ id: name, category_name: name }))}
               vendors={vendors}
               filters={filters}
               onFiltersChange={setFilters}
             />

    </div>
  )
}

export async function getStaticPaths() {
 const apiBase = "https://bhababackend.onrender.com";

  try {
    const products = await fetchWithRetry<Product[]>(`${apiBase}/products`)

    const paths = products
  .filter(product => product.categoryName && product.product_name && product.id)
  .map((product) => ({
    params: {
      category: product.categoryName.toLowerCase().replace(/\s+/g, '-'),
      slug: `${slugify(product.product_name)}_${product.id}`
    }
  }))

    return { paths, fallback: 'blocking' }
  } catch (error) {
    console.error('Error generating paths:', error)
    return { paths: [], fallback: 'blocking' }
  }
}

export async function getStaticProps({ params }: { params: { category: string, slug: string } }) {
  const apiBase = "https://bhababackend.onrender.com";

   try {
    const productId = params.slug.split('_').pop() || ''

    const [, featuredProductsRes, vendorsRes, categoriesRes] = await Promise.all([
      fetch(`${apiBase}/products/${productId}`),
      fetch(`${apiBase}/search?limit=10`),
      fetch(`${apiBase}/vendors`),
      fetch(`${apiBase}/categories`)
    ])

    const parseResponse = async (res: Response) => {
      const text = await res.text()
      try {
        return text ? JSON.parse(text) : []
      } catch (e) {
        console.error('Failed to parse response:', text, e)
        return []
      }
    }

    return {
      props: {
        products: await parseResponse(featuredProductsRes),
        vendors: await parseResponse(vendorsRes),
        categories: await parseResponse(categoriesRes),
      },
      revalidate: 3600
    }
  } catch (error) {
    console.error('Error fetching data:', error)
    return {
      props: {
        products: [],
        vendors: [],
        categories: []
      }
    }
  }
}

export default ProductDetail

================================================================================

FILE 27: C:\src\Bhaba_com\bhaba-marketplace\src\pages\terms-of-service-full.tsx
================================================================================
import React from 'react'
import Head from 'next/head'
import HeaderBar from '../components/HeaderBar'
import { FileText } from 'lucide-react'

const TermsOfServiceFull: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-50">
      <Head>
        <title>Complete Terms of Service | Bhaba Marketplace</title>
        <meta name="description" content="Complete Terms of Service for Bhaba Marketplace" />
      </Head>

      <HeaderBar
        showBackButton={true}
        showSearch={false}
        showViewToggle={false}
        showSort={false}
        showFilter={false}
        onBack={() => window.history.back()}
      />

      <main className="max-w-4xl mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center space-x-3">
              <FileText className="h-8 w-8 text-green-600" />
              <h1 className="text-3xl font-bold text-gray-900">Complete Terms of Service</h1>
            </div>
            {}
          </div>

          <div className="prose prose-lg max-w-none">
            <div className="bg-green-50 p-4 rounded-md mb-6">
              <p className="text-green-800">
                <strong>Last Updated:</strong> January 15, 2024<br />
                <strong>Effective Date:</strong> January 15, 2024
              </p>
            </div>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">1. Agreement to Terms</h2>
              <p className="text-gray-700 mb-4">
                By accessing or using Bhaba Marketplace (&quot;the Platform&quot;), you agree to be bound by these
                Terms of Service and all applicable laws and regulations. If you do not agree with any of
                these terms, you are prohibited from using or accessing this site.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">2. Definitions</h2>
              <ul className="list-disc list-inside text-gray-700 mb-4 space-y-2">
                <li><strong>&quot;Platform&quot;</strong> refers to Bhaba Marketplace website and mobile applications</li>
                <li><strong>&quot;User&quot;</strong> refers to any individual or entity accessing the Platform</li>
                <li><strong>&quot;Vendor&quot;</strong> refers to sellers offering products on the Platform</li>
                <li><strong>&quot;Buyer&quot;</strong> refers to purchasers of products on the Platform</li>
                <li><strong>&quot;Content&quot;</strong> refers to text, images, videos, and other materials</li>
              </ul>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">3. User Accounts</h2>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">3.1 Account Creation</h3>
              <p className="text-gray-700 mb-4">
                To access certain features of the Platform, you must create an account. You agree to provide
                accurate, current, and complete information during the registration process.
              </p>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">3.2 Account Security</h3>
              <p className="text-gray-700 mb-4">
                You are responsible for maintaining the confidentiality of your account credentials and for
                all activities that occur under your account. You agree to notify us immediately of any
                unauthorized use of your account.
              </p>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">3.3 Account Termination</h3>
              <p className="text-gray-700 mb-4">
                We reserve the right to suspend or terminate your account at our sole discretion, without
                notice, for conduct that we believe violates these Terms or is harmful to other users, us,
                or third parties, or for any other reason.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">4. Products and Services</h2>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">4.1 Product Listings</h3>
              <p className="text-gray-700 mb-4">
                Vendors are responsible for the accuracy and completeness of their product listings, including
                descriptions, prices, and images. All products must comply with applicable laws and regulations.
              </p>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">4.2 Pricing and Availability</h3>
              <p className="text-gray-700 mb-4">
                All prices are subject to change without notice. We reserve the right to modify or discontinue
                any product at any time. We are not responsible for typographical errors regarding price or
                any other matter.
              </p>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">4.3 Orders and Payments</h3>
              <p className="text-gray-700 mb-4">
                All orders are subject to acceptance and availability. Payment must be received before orders
                are processed. We use third-party payment processors and are not responsible for their actions.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">5. Intellectual Property</h2>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">5.1 Platform Content</h3>
              <p className="text-gray-700 mb-4">
                All content on the Platform, including text, graphics, logos, and software, is the property
                of Bhaba Limited or its content suppliers and is protected by intellectual property laws.
              </p>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">5.2 User Content</h3>
              <p className="text-gray-700 mb-4">
                By submitting content to the Platform, you grant us a worldwide, non-exclusive, royalty-free
                license to use, reproduce, and display such content in connection with the Platform.
              </p>

              <h3 className="text-xl font-semibold text-gray-700 mb-3">5.3 Trademarks</h3>
              <p className="text-gray-700 mb-4">
                The Bhaba Marketplace name and logo are trademarks of Bhaba Limited. You may not use these
                trademarks without our prior written permission.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">6. Prohibited Activities</h2>
              <p className="text-gray-700 mb-4">
                You agree not to engage in any of the following prohibited activities:
              </p>
              <ul className="list-disc list-inside text-gray-700 mb-4 space-y-2">
                <li>Violating any applicable laws or regulations</li>
                <li>Infringing upon intellectual property rights</li>
                <li>Harassing, abusing, or harming another person</li>
                <li>Uploading viruses or malicious code</li>
                <li>Collecting user information without consent</li>
                <li>Interfering with the Platform&apos;s operation</li>
                <li>Engaging in fraudulent activities</li>
                <li>Selling prohibited or illegal items</li>
              </ul>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">7. Limitation of Liability</h2>
              <p className="text-gray-700 mb-4">
                To the fullest extent permitted by law, Bhaba Limited shall not be liable for any indirect,
                incidental, special, consequential, or punitive damages, including but not limited to loss
                of profits, data, use, goodwill, or other intangible losses.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">8. Indemnification</h2>
              <p className="text-gray-700 mb-4">
                You agree to indemnify and hold harmless Bhaba Limited and its officers, directors, employees,
                and agents from any claims, damages, losses, liabilities, and expenses arising out of your
                use of the Platform or violation of these Terms.
                </p>
              </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">9. Governing Law</h2>
              <p className="text-gray-700 mb-4">
                These Terms shall be governed by and construed in accordance with the laws of the United
                Republic of Tanzania, without regard to its conflict of law provisions.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">10. Dispute Resolution</h2>
              <p className="text-gray-700 mb-4">
                Any disputes arising out of or relating to these Terms shall be resolved through binding
                arbitration in Dar es Salaam, Tanzania, in accordance with the Arbitration Act of Tanzania.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">11. Changes to Terms</h2>
              <p className="text-gray-700 mb-4">
                We reserve the right to modify these Terms at any time. We will provide notice of material
                changes by posting the new Terms on the Platform and updating the &quot;Last Updated&quot; date.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">12. Contact Information</h2>
              <div className="bg-gray-50 p-4 rounded-md">
                <p className="text-gray-700 mb-2">
                  <strong>Bhaba Limited</strong><br />
                  P.O. Box 12345<br />
                  Dar es Salaam, Tanzania
                </p>
                <p className="text-gray-700 mb-2">
                  <strong>Email:</strong> legal@bhabalimited.com<br />
                  <strong>Phone:</strong> +255 618 205 278
                </p>
                <p className="text-gray-700">
                  <strong>Hours:</strong> Monday - Friday, 8:00 AM - 5:00 PM EAT
                </p>
              </div>
            </section>
          </div>
        </div>

        {}
      </main>
    </div>
  )
}

export default TermsOfServiceFull

================================================================================

FILE 28: C:\src\Bhaba_com\bhaba-marketplace\src\pages\terms-of-service.tsx
================================================================================
import React from 'react'
import Head from 'next/head'
import HeaderBar from '../components/HeaderBar'
import Link from 'next/link'

const TermsOfService: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-50">
      <Head>
        <title>Terms of Service | Bhaba Marketplace</title>
        <meta name="description" content="Bhaba Marketplace Terms of Service" />
      </Head>

      <HeaderBar
        showBackButton={true}
        showSearch={false}
        showViewToggle={false}
        showSort={false}
        showFilter={false}
        onBack={() => window.history.back()}
      />

      <main className="max-w-4xl mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-6">Terms of Service</h1>

          <div className="prose prose-lg max-w-none">
            <p className="text-gray-600 mb-6">
              Last updated: {new Date().toLocaleDateString()}
            </p>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">1. Agreement to Terms</h2>
              <p className="text-gray-700">
                By accessing or using Bhaba Marketplace, you agree to be bound by these Terms of Service
                and all applicable laws and regulations.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">2. User Accounts</h2>
              <p className="text-gray-700 mb-4">
                When you create an account with us, you must provide accurate and complete information.
                You are responsible for maintaining the confidentiality of your account and password.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">3. Products and Services</h2>
              <p className="text-gray-700 mb-4">
                All products are subject to availability. We reserve the right to limit the quantities
                of any products that we offer and to discontinue any products at any time.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">4. Pricing and Payment</h2>
              <p className="text-gray-700 mb-4">
                All prices are in Tanzanian Shillings (TZS) and are subject to change without notice.
                We are not responsible for typographical errors regarding price or any other matter.
              </p>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">5. Prohibited Uses</h2>
              <p className="text-gray-700 mb-4">
                You may not use our products:
              </p>
              <ul className="list-disc list-inside text-gray-700 mb-4 space-y-2">
                <li>For any unlawful purpose</li>
                <li>To solicit others to perform or participate in any unlawful acts</li>
                <li>To violate any international, federal, provincial, or state regulations</li>
                <li>To infringe upon or violate our intellectual property rights</li>
              </ul>
            </section>

            <section className="mb-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">6. Contact Information</h2>
              <p className="text-gray-700">
                Questions about the Terms of Service should be sent to us at:
              </p>
              <p className="text-blue-600 mt-2">
                Email: legal@bhabalimited.com<br />
                Phone: +255 618 205 278
              </p>
            </section>

            {}
<div className="border-t pt-6 mt-6">
  <p className="text-sm text-gray-500 mb-4">
    For the complete and most updated version of our Terms of Service, please visit our full terms page:
  </p>
  <Link
    href="/terms-of-service-full"
    className="inline-flex items-center text-green-600 hover:text-green-800 font-semibold"
  >
    View Complete Terms of Service →
  </Link>
</div>
          </div>
        </div>
      </main>
    </div>
  )
}

export default TermsOfService

================================================================================

FILE 29: C:\src\Bhaba_com\bhaba-marketplace\src\pages\test.tsx
================================================================================
export default function TestPage() {
  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold text-blue-600">Tailwind Test</h1>
      <p className="mt-4 text-gray-700">If this text is styled, Tailwind is working!</p>
      <button className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
        Test Button
      </button>
    </div>
  )
}

================================================================================

FILE 30: C:\src\Bhaba_com\bhaba-marketplace\src\styles\globals copy.css
================================================================================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

@keyframes spin-slow {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

@keyframes fade-in {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes bounce {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-6px); }
}

.animate-spin-slow {
  animation: spin-slow 3s linear infinite;
}

.animate-fade-in {
  animation: fade-in 0.5s ease-out;
}

.animate-bounce {
  animation: bounce 1s infinite;
}

nav a {
  transition: color 0.2s ease-in-out;
}

nav a:hover {
  transform: translateY(-1px);
}

@keyframes slideIn {
  from {
    transform: translateX(100%);
  }
  to {
    transform: translateX(0);
  }
}

.lg\:hidden {
  animation: slideIn 0.3s ease-out;
}

.fixed.bottom-0 {
  backdrop-filter: blur(10px);
}

footer a {
  position: relative;
}

footer a::after {
  content: '';
  position: absolute;
  width: 0;
  height: 1px;
  bottom: -2px;
  left: 0;
  background-color: white;
  transition: width 0.3s ease;
}

footer a:hover::after {
  width: 100%;
}
 */

================================================================================

FILE 31: C:\src\Bhaba_com\bhaba-marketplace\src\styles\globals.css
================================================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --primary-50: #eff6ff;
  --primary-500: #3b82f6;
  --primary-600: #2563eb;
  --primary-700: #1d4ed8;
  --secondary-500: #8b5cf6;
  --accent-500: #f59e0b;
  --gray-50: #f9fafb;
  --gray-100: #f3f4f6;
  --gray-900: #111827;
  --border-radius: 0.5rem;
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
  --transition-fast: 0.15s ease-in-out;
  --transition-normal: 0.3s ease-in-out;
  --transition-slow: 0.5s ease-in-out;
}

* {
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
  text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1.6;
  color: var(--gray-900);
  background-color: var(--gray-50);
  overflow-x: hidden;
}

img, video {
  max-width: 100%;
  height: auto;
  display: block;
}

.will-change-transform {
  will-change: transform;
}

.will-change-opacity {
  will-change: opacity;
}

.gpu-accelerated {
  transform: translateZ(0);
  backface-visibility: hidden;
  perspective: 1000px;
}

@media (prefers-reduced-motion: no-preference) {
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideInFromBottom {
    from {
      opacity: 0;
      transform: translateY(100%);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideInFromTop {
    from {
      opacity: 0;
      transform: translateY(-100%);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideInFromRight {
    from {
      opacity: 0;
      transform: translateX(100%);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes scaleIn {
    from {
      opacity: 0;
      transform: scale(0.9);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes bounce {
    0%, 100% {
      transform: translateY(0);
      animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }
    50% {
      transform: translateY(-25%);
      animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
    }
  }

  @keyframes progress {
    0% {
      transform: translateX(-100%);
    }
    50% {
      transform: translateX(0%);
    }
    100% {
      transform: translateX(100%);
    }
  }

  .animate-fade-in {
    animation: fadeIn 0.5s ease-out;
  }

  .animate-slide-in-from-bottom {
    animation: slideInFromBottom 0.3s ease-out;
  }

  .animate-slide-in-from-top {
    animation: slideInFromTop 0.3s ease-out;
  }

  .animate-slide-in-from-right {
    animation: slideInFromRight 0.3s ease-out;
  }

  .animate-scale-in {
    animation: scaleIn 0.2s ease-out;
  }

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  .animate-bounce {
    animation: bounce 1s infinite;
  }

  .animate-progress {
    animation: progress 2s ease-in-out infinite;
  }
}

@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-delay: -1ms !important;
    animation-duration: 1ms !important;
    animation-iteration-count: 1 !important;
    background-attachment: initial !important;
    scroll-behavior: auto !important;
    transition-duration: 0s !important;
    transition-delay: 0s !important;
  }
}

.animate-in {
  animation-fill-mode: both;
}

.fade-in {
  animation: fadeIn 0.5s ease-out;
}

.slide-in-from-bottom {
  animation: slideInFromBottom 0.3s ease-out;
}

.slide-in-from-top {
  animation: slideInFromTop 0.3s ease-out;
}

.slide-in-from-right {
  animation: slideInFromRight 0.3s ease-out;
}

.line-clamp-1 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 1;
}

.line-clamp-2 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
}

.line-clamp-3 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 3;
}

.line-clamp-4 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 4;
}

@media (min-width: 475px) {
  .xs\:block { display: block; }
  .xs\:inline { display: inline; }
  .xs\:flex { display: flex; }
  .xs\:grid { display: grid; }
  .xs\:hidden { display: none; }
  .xs\:text-sm { font-size: 0.875rem; line-height: 1.25rem; }
  .xs\:text-base { font-size: 1rem; line-height: 1.5rem; }
}

@container (min-width: 320px) {
  .container-sm\:text-sm {
    font-size: 0.875rem;
    line-height: 1.25rem;
  }
}

@container (min-width: 640px) {
  .container-md\:grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}

.focus-ring {
  @apply focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500;
}

.focus-ring-inset {
  @apply focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500;
}

.interactive {
  @apply transition-all duration-200 ease-in-out;
  @apply hover:scale-105 active:scale-95;
  @apply focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500;
}

.interactive-subtle {
  @apply transition-all duration-200 ease-in-out;
  @apply hover:shadow-md active:shadow-sm;
  @apply focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500;
}

.card {
  @apply bg-white rounded-lg shadow-sm border border-gray-200;
  @apply transition-shadow duration-200 ease-in-out;
}

.card-hover {
  @apply hover:shadow-lg hover:border-gray-300;
}

.card-interactive {
  @apply cursor-pointer;
  @apply hover:shadow-lg hover:border-gray-300 hover:-translate-y-0.5;
  @apply active:translate-y-0 active:shadow-md;
  @apply focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500;
  @apply transition-all duration-200 ease-in-out;
}

.btn-primary {
  @apply bg-blue-600 text-white font-medium py-2 px-4 rounded-md;
  @apply hover:bg-blue-700 active:bg-blue-800;
  @apply focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500;
  @apply transition-colors duration-200 ease-in-out;
  @apply disabled:opacity-50 disabled:cursor-not-allowed;
}

.btn-secondary {
  @apply bg-gray-100 text-gray-900 font-medium py-2 px-4 rounded-md;
  @apply hover:bg-gray-200 active:bg-gray-300;
  @apply focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500;
  @apply transition-colors duration-200 ease-in-out;
  @apply disabled:opacity-50 disabled:cursor-not-allowed;
}

.btn-success {
  @apply bg-green-600 text-white font-medium py-2 px-4 rounded-md;
  @apply hover:bg-green-700 active:bg-green-800;
  @apply focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500;
  @apply transition-colors duration-200 ease-in-out;
  @apply disabled:opacity-50 disabled:cursor-not-allowed;
}

.skeleton {
  @apply bg-gray-200 animate-pulse rounded;
}

.skeleton-text {
  @apply h-4 bg-gray-200 animate-pulse rounded;
}

.skeleton-avatar {
  @apply w-10 h-10 bg-gray-200 animate-pulse rounded-full;
}

.aspect-square {
  aspect-ratio: 1 / 1;
}

.aspect-video {
  aspect-ratio: 16 / 9;
}

.aspect-photo {
  aspect-ratio: 4 / 3;
}

.container-responsive {
  @apply max-w-7xl mx-auto px-4 sm:px-6 lg:px-8;
}

.masonry-grid {
  columns: 2;
  column-gap: 1rem;
}

@media (min-width: 640px) {
  .masonry-grid {
    columns: 3;
    column-gap: 1.5rem;
  }
}

@media (min-width: 768px) {
  .masonry-grid {
    columns: 4;
  }
}

@media (min-width: 1024px) {
  .masonry-grid {
    columns: 5;
  }
}

@media (min-width: 1280px) {
  .masonry-grid {
    columns: 6;
  }
}

.masonry-item {
  break-inside: avoid;
  margin-bottom: 1rem;
  display: inline-block;
  width: 100%;
}

.image-optimized {
  @apply transition-opacity duration-300;
}

.image-loading {
  @apply opacity-0;
}

.image-loaded {
  @apply opacity-100;
}

.nav-link {
  @apply block px-4 py-2 text-sm font-medium text-gray-700;
  @apply hover:text-blue-600 hover:bg-blue-50;
  @apply focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500;
  @apply transition-colors duration-200 ease-in-out;
}

.nav-link-active {
  @apply text-blue-600 bg-blue-50;
}

.footer-link {
  @apply text-gray-300 hover:text-white transition-colors duration-200;
  position: relative;
}

.footer-link::after {
  content: '';
  position: absolute;
  width: 0;
  height: 1px;
  bottom: -2px;
  left: 0;
  background-color: white;
  transition: width 0.3s ease;
}

.footer-link:hover::after {
  width: 100%;
}

.backdrop-blur-sm {
  backdrop-filter: blur(4px);
}

.backdrop-blur {
  backdrop-filter: blur(8px);
}

.backdrop-blur-lg {
  backdrop-filter: blur(16px);
}

@media print {
  .no-print {
    display: none !important;
  }

  .print-only {
    display: block !important;
  }

  body {
    background: white !important;
    color: black !important;
  }

  .shadow-lg,
  .shadow-md,
  .shadow-sm {
    box-shadow: none !important;
  }
}

@media (prefers-contrast: high) {
  .card {
    @apply border-2 border-gray-900;
  }

  .btn-primary {
    @apply border-2 border-blue-800;
  }

  .btn-secondary {
    @apply border-2 border-gray-800;
  }
}

@media (prefers-color-scheme: dark) {
  :root {
    --gray-50: #1f2937;
    --gray-100: #374151;
    --gray-900: #f9fafb;
  }
}

::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}

::-webkit-scrollbar-track {
  background: var(--gray-100);
}

::-webkit-scrollbar-thumb {
  background: var(--gray-400);
  border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
  background: var(--gray-500);
}

::selection {
  background-color: var(--primary-500);
  color: white;
}

::-moz-selection {
  background-color: var(--primary-500);
  color: white;
}

.text-shadow {
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.text-shadow-lg {
  text-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.gradient-text {
  background: linear-gradient(135deg, var(--primary-500), var(--secondary-500));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.safe-area-inset-top {
  padding-top: env(safe-area-inset-top);
}

.safe-area-inset-bottom {
  padding-bottom: env(safe-area-inset-bottom);
}

.safe-area-inset-left {
  padding-left: env(safe-area-inset-left);
}

.safe-area-inset-right {
  padding-right: env(safe-area-inset-right);
}

================================================================================

FILE 32: C:\src\Bhaba_com\bhaba-marketplace\src\types\api.ts
================================================================================
export interface SearchParams {
  q?: string;
  limit?: number;
  offset?: number;
  category?: string;
  vendor?: string;
  minPrice?: number;
  maxPrice?: number;
  inStock?: boolean;
  sortBy?: string;
}

================================================================================

FILE 33: C:\src\Bhaba_com\bhaba-marketplace\src\types\global.d.ts
================================================================================
interface Window {
  gtag?: (...args: (string | number | Record<string, unknown>)[]) => void
}

================================================================================

FILE 34: C:\src\Bhaba_com\bhaba-marketplace\src\types\index.ts
================================================================================
export interface Product {
  id: string
  productId: string
  product_name: string
  price: number
  description: string
  discount: number
  details: string
  tier_pricing: string[]
  product_images: string[]
  mobile_number: string
  isAvailable: boolean
  moq: number
  added_at: string
  vendorId: string
  vendorName: string
  categoryId: string
  categoryName: string
}

export interface Vendor {
  id: string
  store_name: string
  store_logo: string
}

export interface Category {
  id: string
  name: string
}

================================================================================

FILE 35: C:\src\Bhaba_com\bhaba-marketplace\src\utils\api.ts
================================================================================
 const API_BASE = "https://bhababackend.onrender.com";

export interface Product {
  id: string;
  productId: string;
  product_name: string;
  price: number;
  description: string;
  discount: number;
  details: string;
  tier_pricing: string[];
  product_images: string[];
  mobile_number: string;
  isAvailable: boolean;
  moq: number;
  added_at: string;
  vendorId: string;
  vendorName: string;
  categoryId: string;
  categoryName: string;
}

export interface Vendor {
  id: string;
  store_name: string;
  store_logo: string;
}

export interface Category {
  id: string;
  category_name: string;
}

export interface SearchParams {
  q?: string;
  limit?: number;
  offset?: number;
  category?: string;
  vendor?: string;
  minPrice?: number;
  maxPrice?: number;
  inStock?: boolean;
  sortBy?: 'relevance' | 'price-asc' | 'price-desc' | 'newest' | 'discount';
}

export interface SearchResult {
  hits: Product[];
  totalHits: number;
  totalPages: number;
  currentPage: number;
}

export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  [x: string]: unknown;
}

const handleResponse = async <T = unknown>(response: Response): Promise<T> => {
  try {
    if (!response.ok) {
      const text = await response.text()
      try {
        const error = JSON.parse(text)
        throw new Error(error.message || `Request failed with status ${response.status}`)
      } catch {
        throw new Error(text || `Request failed with status ${response.status}`)
      }
    }

    const contentType = response.headers.get('content-type')
    if (contentType?.includes('application/json')) {
      return response.json()
    }

    return response.text() as unknown as T
  } catch (error) {
    console.error('Error handling response:', error)
    throw error
  }
}

export const fetchProductById = async (id: string): Promise<Product> => {
  const response = await fetch(`${API_BASE}/products/${id}`);
  return handleResponse<Product>(response);
};

export const fetchAllProducts = async (
  limit = 10000,
  offset = 0
): Promise<PaginatedResponse<Product>> => {
  const response = await fetch(
    `${API_BASE}/products?limit=${limit}&offset=${offset}`
  );
  return handleResponse<PaginatedResponse<Product>>(response);
};

export const fetchVendors = async (): Promise<Vendor[]> => {
  const response = await fetch(`${API_BASE}/vendors`);
  return handleResponse<Vendor[]>(response);
};

export const fetchVendorById = async (vendorId: string): Promise<Vendor> => {
  const response = await fetch(`${API_BASE}/vendors/${vendorId}`);
  return handleResponse<Vendor>(response);
};

export const fetchVendorCategories = async (
  vendorId: string
): Promise<Category[]> => {
  const response = await fetch(`${API_BASE}/vendors/${vendorId}/categories`);
  return handleResponse<Category[]>(response);
};

export const fetchVendorProducts = async (
  vendorId: string,
  limit = 20,
  offset = 0
): Promise<PaginatedResponse<Product>> => {
  const response = await fetch(
    `${API_BASE}/vendors/${vendorId}/products?limit=${limit}&offset=${offset}`
  );
  return handleResponse<PaginatedResponse<Product>>(response);
};

export const fetchProductsByCategory = async (
  categoryId: string,
  limit = 20,
  offset = 0
): Promise<PaginatedResponse<Product>> => {
  const response = await fetch(
    `${API_BASE}/categories/${categoryId}/products?limit=${limit}&offset=${offset}`
  );
  return handleResponse<PaginatedResponse<Product>>(response);
};

export const fetchAllCategories = async (): Promise<Category[]> => {
  const response = await fetch(`${API_BASE}/categories`);
  return handleResponse<Category[]>(response);
};

export const searchProducts = async (
  params: SearchParams
): Promise<SearchResult> => {
  const queryParams = new URLSearchParams();

  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined) {
      queryParams.append(key, String(value));
    }
  });

  const response = await fetch(`${API_BASE}/search?${queryParams.toString()}`);
  return handleResponse<SearchResult>(response);
};

export const fetchWithTimeout = async (
  url: string,
  options: RequestInit = {},
  timeout = 8000
): Promise<Response> => {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeout);

  try {
    const response = await fetch(url, {
      ...options,
      signal: controller.signal
    });
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    throw new Error(`Request timed out after ${timeout}ms: ${error instanceof Error ? error.message : String(error)}`);
  }
};

export function slugify(text: string): string {
  return text
    .toString()
    .toLowerCase()
    .replace(/\s+/g, '-')
    .replace(/[^\w\-]+/g, '')
    .replace(/\-\-+/g, '-')
    .replace(/^-+/, '')
    .replace(/-+$/, '');
}

export const formatCurrency = (amount: number): string => {
  return new Intl.NumberFormat('en-TZ', {
    style: 'currency',
    currency: 'TZS'
  }).format(amount);
};

export const transformImageUrl = (firebaseUrl: string): string => {
  if (!firebaseUrl) return '';

  try {
    const urlObj = new URL(firebaseUrl);
    const encodedPath = urlObj.pathname.split('/o/')[1];
    if (!encodedPath) return firebaseUrl;

    const decodedPath = decodeURIComponent(encodedPath);
    return `https://ik.imagekit.io/3n0rrhtkz/firebase_files/${decodedPath}`;
  } catch (error) {
    console.error('Error transforming image URL:', error);
    return firebaseUrl;
  }
};

export async function fetchWithRetry<T>(url: string, retries = 3): Promise<T> {
  try {
    const response = await fetch(url)
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`)
    return await response.json() as T
  } catch (error) {
    if (retries > 0) {
      await new Promise(resolve => setTimeout(resolve, 1000))
      return fetchWithRetry<T>(url, retries - 1)
    }
    console.error(`Failed to fetch ${url} after ${retries} retries`)
    throw error
  }
}

================================================================================

FILE 36: C:\src\Bhaba_com\bhaba-marketplace\src\utils\formatCurrency.ts
================================================================================
export const formatCurrency = (amount: number): string => {
  return new Intl.NumberFormat('en-TZ', {
    style: 'currency',
    currency: 'TZS',
    minimumFractionDigits: 0,
  }).format(amount)
}

================================================================================

FILE 37: C:\src\Bhaba_com\bhaba-marketplace\src\utils\sanitizeData.ts
================================================================================
(File contains no non-comment code)

================================================================================

FILE 38: C:\src\Bhaba_com\bhaba-marketplace\src\utils\shuffle.ts
================================================================================
export function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

export function smartShuffle<T extends { categoryName?: string; vendorId?: string }>(
  products: T[],
  diversityKey: 'categoryName' | 'vendorId' = 'categoryName'
): T[] {
  if (!products || products.length <= 1) return products;

  const groups = new Map<string, T[]>();
  products.forEach(product => {
    const key = product[diversityKey] || 'unknown';
    if (!groups.has(key)) {
      groups.set(key, []);
    }
    groups.get(key)!.push(product);
  });

  groups.forEach((group, key) => {
    groups.set(key, shuffleArray(group));
  });

  const result: T[] = [];
  const groupArrays = Array.from(groups.values());
  const maxLength = Math.max(...groupArrays.map(arr => arr.length));

  for (let i = 0; i < maxLength; i++) {
    groupArrays.forEach(group => {
      if (group[i]) {
        result.push(group[i]);
      }
    });
  }

  return lightShuffle(result);
}

function lightShuffle<T>(array: T[], swapDistance: number = 5): T[] {
  const result = [...array];
  const swaps = Math.floor(array.length / 10);

  for (let i = 0; i < swaps; i++) {
    const index1 = Math.floor(Math.random() * result.length);
    const minDistance = Math.min(swapDistance, Math.floor(result.length / 4));
    const index2 = (index1 + minDistance + Math.floor(Math.random() * minDistance)) % result.length;

    [result[index1], result[index2]] = [result[index2], result[index1]];
  }

  return result;
}

export function redistributeByVendor<T extends { vendorId?: string }>(products: T[]): T[] {
  const result: T[] = [];
  const remaining = [...products];
  let lastVendor: string | null = null;
  let consecutiveCount = 0;

  while (remaining.length > 0) {
    let nextIndex = 0;

    if (consecutiveCount >= 2 && remaining.length > 1) {
      nextIndex = remaining.findIndex(product => product.vendorId !== lastVendor);
      if (nextIndex === -1) nextIndex = 0;
    }

    const product = remaining.splice(nextIndex, 1)[0];
    result.push(product);

    if (product.vendorId === lastVendor) {
      consecutiveCount++;
    } else {
      consecutiveCount = 1;
      lastVendor = product.vendorId || null;
    }
  }

  return result;
}

export function getShuffleSeed(timeWindowMinutes: number = 5): number {
  const now = Date.now();
  const timeWindow = timeWindowMinutes * 60 * 1000;
  return Math.floor(now / timeWindow);
}

export function seededShuffle<T>(array: T[], seed?: number): T[] {
  const actualSeed = seed ?? getShuffleSeed();
  const shuffled = [...array];

  let random = actualSeed;
  const a = 1664525;
  const c = 1013904223;
  const m = Math.pow(2, 32);

  for (let i = shuffled.length - 1; i > 0; i--) {
    random = (a * random + c) % m;
    const j = Math.floor((random / m) * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }

  return shuffled;
}

================================================================================

FILE 39: C:\src\Bhaba_com\bhaba-marketplace\src\utils\webVitals.ts
================================================================================
import { onCLS, onINP, onFCP, onLCP, onTTFB, type Metric } from 'web-vitals'

const sendToAnalytics = (metric: Metric) => {
  const { name, value } = metric
  console.log(`${name}: ${value}`)

  if (typeof window !== 'undefined' && window.gtag) {
    window.gtag('event', name, {
      event_category: 'web_vitals',
      value: Math.round(name === 'CLS' ? value * 1000 : value),
      non_interaction: true
    })
  }
}

export const reportWebVitals = () => {
  onCLS(sendToAnalytics)
  onINP(sendToAnalytics)
  onFCP(sendToAnalytics)
  onLCP(sendToAnalytics)
  onTTFB(sendToAnalytics)
}

================================================================================

FILE 40: C:\src\Bhaba_com\bhaba-marketplace\.env
================================================================================
# NEXT_PUBLIC_API_URL=https://bhaba11.onrender.com
MEILI_HOST=https://ms-8a7e9781b939-25155.fra.meilisearch.io
MEILI_API_KEY=7c878454e3956963982815862e56ec8e7e455718
NEXT_PUBLIC_API_BASE=https://bhababackend.onrender.com

================================================================================

FILE 41: C:\src\Bhaba_com\bhaba-marketplace\.env.local
================================================================================
# NEXT_PUBLIC_API_URL=https://bhaba11.onrender.com
# MEILI_HOST=https://ms-8a7e9781b939-25155.fra.meilisearch.io
# MEILI_API_KEY=7c878454e3956963982815862e56ec8e7e455718
# NEXT_PUBLIC_API_BASE=https://bhababackend.onrender.com

# 3. ENVIRONMENT VARIABLES (.env.local)
# NEXT_PUBLIC_API_BASE=https://bhababackend.onrender.com
NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=G-5EXTZ4D9MW
NEXT_PUBLIC_APP_URL=https://yourstore.com
NEXT_PUBLIC_PLAY_STORE_URL=https://play.google.com/store/apps/details?id=com.vendor.bhaba


# NEXT_PUBLIC_API_URL=https://bhaba11.onrender.com
MEILI_HOST=https://ms-8a7e9781b939-25155.fra.meilisearch.io
MEILI_API_KEY=7c878454e3956963982815862e56ec8e7e455718
NEXT_PUBLIC_API_BASE=https://bhababackend.onrender.com

================================================================================

FILE 42: C:\src\Bhaba_com\bhaba-marketplace\package.json
================================================================================
{
  "name": "bhaba-marketplace",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "api": "node api/index.js",
    "dev:api": "nodemon api/index.js",
    "type-check": "tsc --noEmit",
    "analyze": "cross-env ANALYZE=true next build",
    "lighthouse": "lhci autorun",
    "test": "jest",
    "test:watch": "jest --watch",
    "generate-icons": "node scripts/generate-icons.js",
    "optimize-images": "node scripts/optimize-images.js"
  },
  "dependencies": {
    "@next/bundle-analyzer": "^15.5.3",
    "@tailwindcss/container-queries": "^0.1.1",
    "@tanstack/react-query": "^5.87.1",
    "@tanstack/react-query-devtools": "^5.87.1",
    "compression": "^1.8.1",
    "cors": "^2.8.5",
    "critical": "^7.2.1",
    "critters": "^0.0.23",
    "dotenv": "^17.0.1",
    "express": "^5.1.0",
    "express-rate-limit": "^8.0.1",
    "lucide-react": "^0.525.0",
    "meilisearch": "^0.51.0",
    "next": "15.3.4",
    "next-pwa": "^5.6.0",
    "node-cache": "^5.1.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-error-boundary": "^6.0.0",
    "react-masonry-css": "^1.0.16",
    "react-window": "^1.8.9",
    "sharp": "^0.34.3",
    "web-vitals": "^5.1.0",
    "workbox-webpack-plugin": "^7.3.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@headlessui/react": "^2.2.4",
    "@heroicons/react": "^2.2.0",
    "@lhci/cli": "^0.15.1",
    "@tailwindcss/forms": "^0.5.7",
    "@tailwindcss/typography": "^0.5.10",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@types/cors": "^2.8.19",
    "@types/express": "^5.0.3",
    "@types/node": "^20.19.2",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/react-window": "^1.8.8",
    "autoprefixer": "^10.4.17",
    "cross-env": "^10.0.0",
    "css-loader": "^7.1.2",
    "eslint": "^9",
    "eslint-config-next": "15.3.4",
    "jest": "^30.1.3",
    "nodemon": "^3.1.10",
    "postcss": "^8.4.38",
    "postcss-loader": "^8.1.1",
    "style-loader": "^4.0.0",
    "tailwindcss": "^3.4.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3"
  }
}

================================================================================

FILE 43: C:\src\Bhaba_com\bhaba-marketplace\public\manifest.json
================================================================================
// ========================================
// COMPLETE IMPLEMENTATION GUIDE
// ========================================

// 1. PWA Configuration Files

// public/manifest.json
{
  "name": "Bhaba Marketplace",
  "short_name": "Bhaba",
  "description": "Shop online in Tanzania for electronics, clothing, shoes and more",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#3B82F6",
  "orientation": "portrait-primary",
  "categories": ["shopping", "business"],
  "lang": "en",
  "dir": "ltr",
  "icons": [
    {
      "src": "/icons/icon-72x72.png",
      "sizes": "72x72",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-96x96.png",
      "sizes": "96x96",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-128x128.png",
      "sizes": "128x128",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-144x144.png",
      "sizes": "144x144",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-152x152.png",
      "sizes": "152x152",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-384x384.png",
      "sizes": "384x384",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "maskable any"
    }
  ],
  "shortcuts": [
    {
      "name": "Browse Electronics",
      "short_name": "Electronics",
      "description": "Browse electronic products",
      "url": "/category/electronics",
      "icons": [{ "src": "/icons/electronics.png", "sizes": "96x96" }]
    },
    {
      "name": "Browse Clothing",
      "short_name": "Clothing",
      "description": "Browse clothing items",
      "url": "/category/clothing",
      "icons": [{ "src": "/icons/clothing.png", "sizes": "96x96" }]
    }
  ],
  "screenshots": [
    {
      "src": "/screenshots/mobile1.png",
      "sizes": "640x1136",
      "type": "image/png",
      "form_factor": "narrow"
    },
    {
      "src": "/screenshots/desktop1.png",
      "sizes": "1280x720",
      "type": "image/png",
      "form_factor": "wide"
    }
  ]
}

================================================================================

FILE 44: C:\src\Bhaba_com\bhaba-marketplace\public\sw.js
================================================================================
const CACHE_NAME = 'bhaba-marketplace-v1'
const STATIC_CACHE = 'static-v1'
const DYNAMIC_CACHE = 'dynamic-v1'

const STATIC_ASSETS = [
  '/',
  '/Bhaba_logo.png',
  '/manifest.json',
  '/_next/static/css/',
  '/_next/static/js/',
]

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(STATIC_CACHE).then((cache) => {
      return cache.addAll(STATIC_ASSETS)
    })
  )
  self.skipWaiting()
})

self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
            return caches.delete(cacheName)
          }
        })
      )
    })
  )
  self.clients.claim()
})

self.addEventListener('fetch', (event) => {
  const { request } = event
  const url = new URL(request.url)

  if (request.method !== 'GET') return

  if (url.pathname.startsWith('/api/')) {
    event.respondWith(
      fetch(request)
        .then((response) => {
          if (response.ok) {
            const responseClone = response.clone()
            caches.open(DYNAMIC_CACHE).then((cache) => {
              cache.put(request, responseClone)
            })
          }
          return response
        })
        .catch(() => {
          return caches.match(request)
        })
    )
    return
  }

  if (
    url.pathname.startsWith('/_next/static/') ||
    url.pathname.includes('.png') ||
    url.pathname.includes('.jpg') ||
    url.pathname.includes('.jpeg') ||
    url.pathname.includes('.webp')
  ) {
    event.respondWith(
      caches.match(request).then((response) => {
        return response || fetch(request).then((fetchResponse) => {
          if (fetchResponse.ok) {
            const responseClone = fetchResponse.clone()
            caches.open(STATIC_CACHE).then((cache) => {
              cache.put(request, responseClone)
            })
          }
          return fetchResponse
        })
      })
    )
    return
  }

  event.respondWith(
    caches.match(request).then((response) => {
      const fetchPromise = fetch(request).then((fetchResponse) => {
        if (fetchResponse.ok) {
          const responseClone = fetchResponse.clone()
          caches.open(DYNAMIC_CACHE).then((cache) => {
            cache.put(request, responseClone)
          })
        }
        return fetchResponse
      })

      return response || fetchPromise
    })
  )
})

================================================================================

FILE 45: C:\src\Bhaba_com\bhaba-marketplace\public\robots.txt
================================================================================
User-agent: *
Allow: /
Sitemap: https://yourstore.com/sitemap.xml

================================================================================

